// Unit conversion system / –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –µ–¥–∏–Ω–∏—Ü
const unitConversions = {
    // Length / –î–ª–∏–Ω–∞
    length: {
        –º–º: 1,
        —Å–º: 10,
        –º: 1000,
        –∫–º: 1000000
    },
    // Area / –ü–ª–æ—â–∞–¥—å
    area: {
        '–º–º¬≤': 1,
        '—Å–º¬≤': 100,
        '–º¬≤': 1000000,
        '–≥–∞': 10000000000
    },
    // Volume / –û–±—ä–µ–º
    volume: {
        '–º–º¬≥': 1,
        '—Å–º¬≥': 1000,
        '–º¬≥': 1000000000,
        '–ª': 1000000,
        '–º–ª': 1000
    },
    // Weight / –í–µ—Å
    weight: {
        –º–≥: 1,
        –≥: 1000,
        –∫–≥: 1000000,
        —Ç: 1000000000
    },
    // Liquid / –ñ–∏–¥–∫–æ—Å—Ç—å
    liquid: {
        –º–ª: 1,
        –ª: 1000,
        '–º¬≥': 1000000
    }
};

// Convert units / –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –µ–¥–∏–Ω–∏—Ü
function convertUnit(value, fromUnit, toUnit, type) {
    if (!unitConversions[type]) return value;
    const conversions = unitConversions[type];
    if (!conversions[fromUnit] || !conversions[toUnit]) return value;
    
    // Convert to base unit then to target unit
    const baseValue = value * conversions[fromUnit];
    return baseValue / conversions[toUnit];
}

// Calculator data and logic / –î–∞–Ω–Ω—ã–µ –∏ –ª–æ–≥–∏–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
const calculators = [
    // Repair and Finishing / –†–µ–º–æ–Ω—Ç –∏ –æ—Ç–¥–µ–ª–∫–∞
    {
        id: 'paint',
        title: '–†–∞—Å—á–µ—Ç –∫—Ä–∞—Å–∫–∏',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∞—Å–∫–∏ –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏ —Å—Ç–µ–Ω',
        category: 'repair',
        icon: 'üé®',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω', type: 'number', min: 0.1, step: 0.1 },
            { name: 'areaUnit', label: '–ï–¥–∏–Ω–∏—Ü–∞ –ø–ª–æ—â–∞–¥–∏', type: 'select', options: [
                { value: '–º¬≤', text: '–º¬≤' },
                { value: '—Å–º¬≤', text: '—Å–º¬≤' }
            ]},
            { name: 'layers', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤', type: 'number', min: 1, max: 5, value: 2 },
            { name: 'consumption', label: '–†–∞—Å—Ö–æ–¥ –∫—Ä–∞—Å–∫–∏ (–ª/–º¬≤)', type: 'number', step: 0.01, value: 0.15 },
            { name: 'resultUnit', label: '–†–µ–∑—É–ª—å—Ç–∞—Ç –≤', type: 'select', options: [
                { value: '–ª', text: '–ª–∏—Ç—Ä–∞—Ö' },
                { value: '–º–ª', text: '–º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö' }
            ]}
        ],
        calculate: (inputs) => {
            const areaInM2 = convertUnit(inputs.area, inputs.areaUnit, '–º¬≤', 'area');
            const paintLiters = areaInM2 * inputs.layers * inputs.consumption;
            const result = convertUnit(paintLiters, '–ª', inputs.resultUnit, 'liquid');
            return `${result.toFixed(2)} ${inputs.resultUnit}`;
        }
    },
    {
        id: 'wallpaper',
        title: '–†–∞—Å—á–µ—Ç –æ–±–æ–µ–≤',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–ª–æ–Ω–æ–≤ –æ–±–æ–µ–≤ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã',
        category: 'repair',
        icon: 'üè†',
        inputs: [
            { name: 'roomLength', label: '–î–ª–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã', type: 'number', min: 0.1, step: 0.1 },
            { name: 'roomWidth', label: '–®–∏—Ä–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã', type: 'number', min: 0.1, step: 0.1 },
            { name: 'roomHeight', label: '–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤', type: 'number', min: 0.1, step: 0.1 },
            { name: 'lengthUnit', label: '–ï–¥–∏–Ω–∏—Ü–∞ –¥–ª–∏–Ω—ã', type: 'select', options: [
                { value: '–º', text: '–º–µ—Ç—Ä—ã' },
                { value: '—Å–º', text: '—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã' }
            ]},
            { name: 'rollWidth', label: '–®–∏—Ä–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞ (–º)', type: 'number', step: 0.01, value: 0.53 },
            { name: 'rollLength', label: '–î–ª–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞ (–º)', type: 'number', value: 10 },
            { name: 'pattern', label: '–†–∞–ø–ø–æ—Ä—Ç —Ä–∏—Å—É–Ω–∫–∞ (—Å–º)', type: 'number', min: 0, value: 0 }
        ],
        calculate: (inputs) => {
            const length = convertUnit(inputs.roomLength, inputs.lengthUnit, '–º', 'length');
            const width = convertUnit(inputs.roomWidth, inputs.lengthUnit, '–º', 'length');
            const height = convertUnit(inputs.roomHeight, inputs.lengthUnit, '–º', 'length');
            const patternM = inputs.pattern / 100;
            
            const perimeter = 2 * (length + width);
            const strips = Math.ceil(perimeter / inputs.rollWidth);
            const stripHeight = height + patternM;
            const stripsPerRoll = Math.floor(inputs.rollLength / stripHeight);
            const rolls = Math.ceil(strips / stripsPerRoll);
            
            return `${rolls} —Ä—É–ª–æ–Ω–æ–≤ (${strips} –ø–æ–ª–æ—Å)`;
        }
    },
    {
        id: 'tiles',
        title: '–†–∞—Å—á–µ—Ç –ø–ª–∏—Ç–∫–∏',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∏—Ç–∫–∏ –¥–ª—è –ø–æ–ª–∞ –∏–ª–∏ —Å—Ç–µ–Ω',
        category: 'repair',
        icon: '‚óº',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏', type: 'number', min: 0.1, step: 0.1 },
            { name: 'areaUnit', label: '–ï–¥–∏–Ω–∏—Ü–∞ –ø–ª–æ—â–∞–¥–∏', type: 'select', options: [
                { value: '–º¬≤', text: '–º¬≤' },
                { value: '—Å–º¬≤', text: '—Å–º¬≤' }
            ]},
            { name: 'tileLength', label: '–î–ª–∏–Ω–∞ –ø–ª–∏—Ç–∫–∏', type: 'number', min: 1 },
            { name: 'tileWidth', label: '–®–∏—Ä–∏–Ω–∞ –ø–ª–∏—Ç–∫–∏', type: 'number', min: 1 },
            { name: 'tileSizeUnit', label: '–ï–¥–∏–Ω–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–ª–∏—Ç–∫–∏', type: 'select', options: [
                { value: '—Å–º', text: '—Å–º' },
                { value: '–º–º', text: '–º–º' }
            ]},
            { name: 'jointWidth', label: '–®–∏—Ä–∏–Ω–∞ —à–≤–∞ (–º–º)', type: 'number', min: 0, value: 2 },
            { name: 'reserve', label: '–ó–∞–ø–∞—Å (%)', type: 'number', min: 0, max: 30, value: 10 }
        ],
        calculate: (inputs) => {
            const areaM2 = convertUnit(inputs.area, inputs.areaUnit, '–º¬≤', 'area');
            const tileLengthM = convertUnit(inputs.tileLength, inputs.tileSizeUnit, '–º', 'length');
            const tileWidthM = convertUnit(inputs.tileWidth, inputs.tileSizeUnit, '–º', 'length');
            const jointM = inputs.jointWidth / 1000;
            
            const tileAreaWithJoint = (tileLengthM + jointM) * (tileWidthM + jointM);
            const tilesNeeded = areaM2 / tileAreaWithJoint;
            const totalTiles = Math.ceil(tilesNeeded * (1 + inputs.reserve / 100));
            const boxes = Math.ceil(totalTiles / 10); // Assuming 10 tiles per box
            
            return `${totalTiles} –ø–ª–∏—Ç–æ–∫ (‚âà${boxes} —É–ø–∞–∫–æ–≤–æ–∫ –ø–æ 10 —à—Ç)`;
        }
    },
    {
        id: 'laminate',
        title: '–†–∞—Å—á–µ—Ç –ª–∞–º–∏–Ω–∞—Ç–∞',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–æ–∫ –ª–∞–º–∏–Ω–∞—Ç–∞',
        category: 'repair',
        icon: 'ü™µ',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –ø–æ–ª–∞', type: 'number', min: 0.1, step: 0.1 },
            { name: 'areaUnit', label: '–ï–¥–∏–Ω–∏—Ü–∞ –ø–ª–æ—â–∞–¥–∏', type: 'select', options: [
                { value: '–º¬≤', text: '–º¬≤' },
                { value: '—Å–º¬≤', text: '—Å–º¬≤' }
            ]},
            { name: 'packArea', label: '–ü–ª–æ—â–∞–¥—å –≤ —É–ø–∞–∫–æ–≤–∫–µ (–º¬≤)', type: 'number', step: 0.01, value: 2.5 },
            { name: 'reserve', label: '–ó–∞–ø–∞—Å (%)', type: 'number', min: 0, max: 20, value: 5 },
            { name: 'direction', label: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∫–ª–∞–¥–∫–∏', type: 'select', options: [
                { value: 'straight', text: '–ü—Ä—è–º–∞—è' },
                { value: 'diagonal', text: '–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è (+15% —Ä–∞—Å—Ö–æ–¥)' }
            ]}
        ],
        calculate: (inputs) => {
            const areaM2 = convertUnit(inputs.area, inputs.areaUnit, '–º¬≤', 'area');
            let totalArea = areaM2 * (1 + inputs.reserve / 100);
            if (inputs.direction === 'diagonal') {
                totalArea *= 1.15;
            }
            const packs = Math.ceil(totalArea / inputs.packArea);
            const totalM2 = packs * inputs.packArea;
            
            return `${packs} —É–ø–∞–∫–æ–≤–æ–∫ (${totalM2.toFixed(2)} –º¬≤)`;
        }
    },
    {
        id: 'ceiling_tiles',
        title: '–ü–æ—Ç–æ–ª–æ—á–Ω–∞—è –ø–ª–∏—Ç–∫–∞',
        description: '–†–∞—Å—á–µ—Ç –ø–æ—Ç–æ–ª–æ—á–Ω–æ–π –ø–ª–∏—Ç–∫–∏',
        category: 'repair',
        icon: '‚¨ú',
        inputs: [
            { name: 'length', label: '–î–ª–∏–Ω–∞ –ø–æ—Ç–æ–ª–∫–∞', type: 'number', min: 0.1, step: 0.1 },
            { name: 'width', label: '–®–∏—Ä–∏–Ω–∞ –ø–æ—Ç–æ–ª–∫–∞', type: 'number', min: 0.1, step: 0.1 },
            { name: 'unit', label: '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è', type: 'select', options: [
                { value: '–º', text: '–º–µ—Ç—Ä—ã' },
                { value: '—Å–º', text: '—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã' }
            ]},
            { name: 'tileSize', label: '–†–∞–∑–º–µ—Ä –ø–ª–∏—Ç–∫–∏ (—Å–º)', type: 'number', value: 50 }
        ],
        calculate: (inputs) => {
            const lengthM = convertUnit(inputs.length, inputs.unit, '–º', 'length');
            const widthM = convertUnit(inputs.width, inputs.unit, '–º', 'length');
            const area = lengthM * widthM;
            const tileSizeM = inputs.tileSize / 100;
            const tileArea = tileSizeM * tileSizeM;
            const tiles = Math.ceil(area / tileArea);
            
            return `${tiles} –ø–ª–∏—Ç–æ–∫`;
        }
    },
    {
        id: 'grout',
        title: '–ó–∞—Ç–∏—Ä–∫–∞ –¥–ª—è —à–≤–æ–≤',
        description: '–†–∞—Å—á–µ—Ç –∑–∞—Ç–∏—Ä–∫–∏ –¥–ª—è –ø–ª–∏—Ç–∫–∏',
        category: 'repair',
        icon: 'üî≤',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –æ–±–ª–∏—Ü–æ–≤–∫–∏ (–º¬≤)', type: 'number', min: 0.1, step: 0.1 },
            { name: 'tileLength', label: '–î–ª–∏–Ω–∞ –ø–ª–∏—Ç–∫–∏ (—Å–º)', type: 'number', min: 1 },
            { name: 'tileWidth', label: '–®–∏—Ä–∏–Ω–∞ –ø–ª–∏—Ç–∫–∏ (—Å–º)', type: 'number', min: 1 },
            { name: 'tileThickness', label: '–¢–æ–ª—â–∏–Ω–∞ –ø–ª–∏—Ç–∫–∏ (–º–º)', type: 'number', min: 1, value: 8 },
            { name: 'jointWidth', label: '–®–∏—Ä–∏–Ω–∞ —à–≤–∞ (–º–º)', type: 'number', min: 1, value: 3 }
        ],
        calculate: (inputs) => {
            const coefficient = 1.5; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞—Å—Ö–æ–¥–∞
            const grout = (inputs.area * inputs.jointWidth * inputs.tileThickness * coefficient * 
                          ((inputs.tileLength + inputs.tileWidth) / (inputs.tileLength * inputs.tileWidth))) / 10;
            
            return `${grout.toFixed(1)} –∫–≥ –∑–∞—Ç–∏—Ä–∫–∏`;
        }
    },
    {
        id: 'primer',
        title: '–†–∞—Å—á–µ—Ç –≥—Ä—É–Ω—Ç–æ–≤–∫–∏',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–Ω—Ç–æ–≤–∫–∏ –¥–ª—è —Å—Ç–µ–Ω',
        category: 'repair',
        icon: 'ü™£',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (–º¬≤)', type: 'number', min: 0.1, step: 0.1 },
            { name: 'consumption', label: '–†–∞—Å—Ö–æ–¥ (–ª/–º¬≤)', type: 'number', min: 0.05, step: 0.01, value: 0.15 },
            { name: 'layers', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤', type: 'number', min: 1, max: 3, value: 1 },
            { name: 'surface', label: '–¢–∏–ø –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏', type: 'select', options: [
                { value: 1, text: '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞' },
                { value: 1.3, text: '–ë–µ—Ç–æ–Ω' },
                { value: 0.8, text: '–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω' },
                { value: 1.5, text: '–ö–∏—Ä–ø–∏—á' }
            ]}
        ],
        calculate: (inputs) => {
            const primer = inputs.area * inputs.consumption * inputs.layers * inputs.surface;
            return `${primer.toFixed(1)} –ª–∏—Ç—Ä–æ–≤`;
        }
    },
    {
        id: 'putty',
        title: '–†–∞—Å—á–µ—Ç —à–ø–∞–∫–ª–µ–≤–∫–∏',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–ø–∞–∫–ª–µ–≤–∫–∏ –¥–ª—è —Å—Ç–µ–Ω',
        category: 'repair',
        icon: 'ü•Ñ',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω (–º¬≤)', type: 'number', min: 0.1, step: 0.1 },
            { name: 'type', label: '–¢–∏–ø —à–ø–∞–∫–ª–µ–≤–∫–∏', type: 'select', options: [
                                { value: 1, text: '–°—Ç–∞—Ä—Ç–æ–≤–∞—è (1 –∫–≥/–º¬≤)' },
                { value: 0.5, text: '–§–∏–Ω–∏—à–Ω–∞—è (0.5 –∫–≥/–º¬≤)' },
                { value: 1.5, text: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è (1.5 –∫–≥/–º¬≤)' }
            ]},
            { name: 'layers', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤', type: 'number', min: 1, max: 3, value: 2 },
            { name: 'surface', label: '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏', type: 'select', options: [
                { value: 1, text: '–†–æ–≤–Ω–∞—è' },
                { value: 1.3, text: '–ù–µ—Ä–æ–≤–Ω–∞—è' },
                { value: 1.5, text: '–û—á–µ–Ω—å –Ω–µ—Ä–æ–≤–Ω–∞—è' }
            ]}
        ],
        calculate: (inputs) => {
            const putty = inputs.area * inputs.type * inputs.layers * inputs.surface;
            const bags = Math.ceil(putty / 25); // 25 –∫–≥ –≤ –º–µ—à–∫–µ
            return `${putty.toFixed(1)} –∫–≥ (${bags} –º–µ—à–∫–æ–≤ –ø–æ 25 –∫–≥)`;
        }
    },
    {
        id: 'baseboard',
        title: '–†–∞—Å—á–µ—Ç –ø–ª–∏–Ω—Ç—É—Å–æ–≤',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∏–Ω—Ç—É—Å–æ–≤ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã',
        category: 'repair',
        icon: 'üìè',
        inputs: [
            { name: 'length', label: '–î–ª–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã', type: 'number', min: 0.1, step: 0.1 },
            { name: 'width', label: '–®–∏—Ä–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã', type: 'number', min: 0.1, step: 0.1 },
            { name: 'unit', label: '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è', type: 'select', options: [
                { value: '–º', text: '–º–µ—Ç—Ä—ã' },
                { value: '—Å–º', text: '—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã' }
            ]},
            { name: 'doorWidth', label: '–®–∏—Ä–∏–Ω–∞ –¥–≤–µ—Ä–Ω—ã—Ö –ø—Ä–æ–µ–º–æ–≤ (–º)', type: 'number', min: 0, step: 0.1, value: 0.8 },
            { name: 'doorCount', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π', type: 'number', min: 0, value: 1 },
            { name: 'baseboardLength', label: '–î–ª–∏–Ω–∞ –ø–ª–∏–Ω—Ç—É—Å–∞ (–º)', type: 'number', value: 2.5 }
        ],
        calculate: (inputs) => {
            const lengthM = convertUnit(inputs.length, inputs.unit, '–º', 'length');
            const widthM = convertUnit(inputs.width, inputs.unit, '–º', 'length');
            const perimeter = 2 * (lengthM + widthM);
            const doorways = inputs.doorWidth * inputs.doorCount;
            const needed = perimeter - doorways;
            const pieces = Math.ceil(needed / inputs.baseboardLength);
            
            return `${pieces} —à—Ç—É–∫ (${(pieces * inputs.baseboardLength).toFixed(1)} –º)`;
        }
    },
    {
        id: 'drywall',
        title: '–†–∞—Å—á–µ—Ç –≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω–∞',
        description: '–õ–∏—Å—Ç—ã –≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω–∞ –¥–ª—è —Å—Ç–µ–Ω/–ø–æ—Ç–æ–ª–∫–∞',
        category: 'repair',
        icon: 'üìã',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (–º¬≤)', type: 'number', min: 0.1, step: 0.1 },
            { name: 'sheetLength', label: '–î–ª–∏–Ω–∞ –ª–∏—Å—Ç–∞ (–º)', type: 'number', value: 2.5 },
            { name: 'sheetWidth', label: '–®–∏—Ä–∏–Ω–∞ –ª–∏—Å—Ç–∞ (–º)', type: 'number', value: 1.2 },
            { name: 'layers', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤', type: 'number', min: 1, max: 2, value: 1 },
            { name: 'waste', label: '–û—Ç—Ö–æ–¥—ã (%)', type: 'number', min: 5, max: 20, value: 10 }
        ],
        calculate: (inputs) => {
            const sheetArea = inputs.sheetLength * inputs.sheetWidth;
            const totalArea = inputs.area * inputs.layers * (1 + inputs.waste / 100);
            const sheets = Math.ceil(totalArea / sheetArea);
            
            return `${sheets} –ª–∏—Å—Ç–æ–≤`;
        }
    },
    {
        id: 'insulation',
        title: '–£—Ç–µ–ø–ª–∏—Ç–µ–ª—å –¥–ª—è —Å—Ç–µ–Ω',
        description: '–†–∞—Å—á–µ—Ç —É—Ç–µ–ø–ª–∏—Ç–µ–ª—è',
        category: 'repair',
        icon: 'üî•',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω (–º¬≤)', type: 'number', min: 0.1, step: 0.1 },
            { name: 'thickness', label: '–¢–æ–ª—â–∏–Ω–∞ —É—Ç–µ–ø–ª–∏—Ç–µ–ª—è (–º–º)', type: 'number', min: 50, step: 50, value: 100 },
            { name: 'packVolume', label: '–û–±—ä–µ–º —É–ø–∞–∫–æ–≤–∫–∏ (–º¬≥)', type: 'number', step: 0.01, value: 0.5 },
            { name: 'density', label: '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–∫–≥/–º¬≥)', type: 'number', value: 35 }
        ],
        calculate: (inputs) => {
            const volume = inputs.area * (inputs.thickness / 1000);
            const packs = Math.ceil(volume / inputs.packVolume);
            const weight = volume * inputs.density;
            
            return `${packs} —É–ø–∞–∫–æ–≤–æ–∫ (${volume.toFixed(2)} –º¬≥, ${weight.toFixed(0)} –∫–≥)`;
        }
    },

    // Construction Materials / –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    {
        id: 'bricks',
        title: '–†–∞—Å—á–µ—Ç –∫–∏—Ä–ø–∏—á–∞',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∏—Ä–ø–∏—á–∞ –¥–ª—è —Å—Ç–µ–Ω—ã',
        category: 'construction',
        icon: 'üß±',
        inputs: [
            { name: 'length', label: '–î–ª–∏–Ω–∞ —Å—Ç–µ–Ω—ã', type: 'number', min: 0.1, step: 0.1 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ —Å—Ç–µ–Ω—ã', type: 'number', min: 0.1, step: 0.1 },
            { name: 'unit', label: '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è', type: 'select', options: [
                { value: '–º', text: '–º–µ—Ç—Ä—ã' },
                { value: '—Å–º', text: '—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã' }
            ]},
            { name: 'thickness', label: '–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω—ã', type: 'select', options: [
                { value: 120, text: '0.5 –∫–∏—Ä–ø–∏—á–∞ (120 –º–º)' },
                { value: 250, text: '1 –∫–∏—Ä–ø–∏—á (250 –º–º)' },
                { value: 380, text: '1.5 –∫–∏—Ä–ø–∏—á–∞ (380 –º–º)' },
                { value: 510, text: '2 –∫–∏—Ä–ø–∏—á–∞ (510 –º–º)' },
                { value: 640, text: '2.5 –∫–∏—Ä–ø–∏—á–∞ (640 –º–º)' }
            ]},
            { name: 'brickType', label: '–¢–∏–ø –∫–∏—Ä–ø–∏—á–∞', type: 'select', options: [
                { value: 'single', text: '–û–¥–∏–Ω–∞—Ä–Ω—ã–π (250√ó120√ó65)' },
                { value: 'one_half', text: '–ü–æ–ª—É—Ç–æ—Ä–Ω—ã–π (250√ó120√ó88)' },
                { value: 'double', text: '–î–≤–æ–π–Ω–æ–π (250√ó120√ó138)' }
            ]},
            { name: 'jointThickness', label: '–¢–æ–ª—â–∏–Ω–∞ —à–≤–∞ (–º–º)', type: 'number', min: 5, max: 15, value: 10 }
        ],
        calculate: (inputs) => {
            const lengthM = convertUnit(inputs.length, inputs.unit, '–º', 'length');
            const heightM = convertUnit(inputs.height, inputs.unit, '–º', 'length');
            const area = lengthM * heightM;
            
            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∏—Ä–ø–∏—á–µ–π –Ω–∞ 1 –º¬≤ —Å —É—á–µ—Ç–æ–º —à–≤–æ–≤
            const bricksPerM2 = {
                single: { 120: 51, 250: 102, 380: 153, 510: 204, 640: 255 },
                one_half: { 120: 39, 250: 78, 380: 117, 510: 156, 640: 195 },
                double: { 120: 26, 250: 52, 380: 78, 510: 104, 640: 130 }
            };
            
            const count = Math.ceil(area * bricksPerM2[inputs.brickType][inputs.thickness] * 
                                   (1 + inputs.jointThickness / 100));
            
            // –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ç–≤–æ—Ä–∞
            const mortarVolume = area * (inputs.thickness / 1000) * 0.25; // ~25% –æ—Ç –æ–±—ä–µ–º–∞
            
            return `${count} –∫–∏—Ä–ø–∏—á–µ–π, ${mortarVolume.toFixed(2)} –º¬≥ —Ä–∞—Å—Ç–≤–æ—Ä–∞`;
        }
    },
    {
        id: 'concrete',
        title: '–†–∞—Å—á–µ—Ç –±–µ—Ç–æ–Ω–∞',
        description: '–û–±—ä–µ–º –±–µ—Ç–æ–Ω–∞ –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
        category: 'construction',
        icon: 'üèóÔ∏è',
        inputs: [
            { name: 'type', label: '–¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', type: 'select', options: [
                { value: 'slab', text: '–ü–ª–∏—Ç–∞' },
                { value: 'strip', text: '–õ–µ–Ω—Ç–æ—á–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç' },
                { value: 'column', text: '–°—Ç–æ–ª–±—á–∞—Ç—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç' }
            ]},
            { name: 'length', label: '–î–ª–∏–Ω–∞', type: 'number', min: 0.1, step: 0.1 },
            { name: 'width', label: '–®–∏—Ä–∏–Ω–∞', type: 'number', min: 0.1, step: 0.1 },
            { name: 'depth', label: '–ì–ª—É–±–∏–Ω–∞/–í—ã—Å–æ—Ç–∞', type: 'number', min: 0.1, step: 0.1 },
            { name: 'unit', label: '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è', type: 'select', options: [
                { value: '–º', text: '–º–µ—Ç—Ä—ã' },
                { value: '—Å–º', text: '—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã' }
            ]},
            { name: 'columns', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±–æ–≤', type: 'number', min: 1, value: 1, 
              condition: (inputs) => inputs.type === 'column' }
        ],
        calculate: (inputs) => {
            const lengthM = convertUnit(inputs.length, inputs.unit, '–º', 'length');
            const widthM = convertUnit(inputs.width, inputs.unit, '–º', 'length');
            const depthM = convertUnit(inputs.depth, inputs.unit, '–º', 'length');
            
            let volume;
            if (inputs.type === 'slab') {
                volume = lengthM * widthM * depthM;
            } else if (inputs.type === 'strip') {
                const perimeter = 2 * (lengthM + widthM);
                volume = perimeter * widthM * depthM;
            } else {
                volume = lengthM * widthM * depthM * inputs.columns;
            }
            
            // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ 1 –º¬≥ –±–µ—Ç–æ–Ω–∞ –ú300
            const cement = volume * 350; // –∫–≥
            const sand = volume * 0.65; // –º¬≥
            const gravel = volume * 1.0; // –º¬≥
            const water = volume * 190; // –ª
            
            return `${volume.toFixed(2)} –º¬≥ –±–µ—Ç–æ–Ω–∞ (—Ü–µ–º–µ–Ω—Ç: ${cement.toFixed(0)} –∫–≥, –ø–µ—Å–æ–∫: ${sand.toFixed(2)} –º¬≥, —â–µ–±–µ–Ω—å: ${gravel.toFixed(2)} –º¬≥)`;
        }
    },
    {
        id: 'cement_mortar',
        title: '–¶–µ–º–µ–Ω—Ç–Ω—ã–π —Ä–∞—Å—Ç–≤–æ—Ä',
        description: '–†–∞—Å—á–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞—Å—Ç–≤–æ—Ä–∞',
        category: 'construction',
        icon: 'ü™£',
        inputs: [
            { name: 'volume', label: '–û–±—ä–µ–º —Ä–∞—Å—Ç–≤–æ—Ä–∞', type: 'number', min: 0.01, step: 0.01 },
            { name: 'volumeUnit', label: '–ï–¥–∏–Ω–∏—Ü–∞ –æ–±—ä–µ–º–∞', type: 'select', options: [
                { value: '–º¬≥', text: '–º¬≥' },
                { value: '–ª', text: '–ª–∏—Ç—Ä—ã' }
            ]},
            { name: 'ratio', label: '–ü—Ä–æ–ø–æ—Ä—Ü–∏—è (—Ü–µ–º–µ–Ω—Ç:–ø–µ—Å–æ–∫)', type: 'select', options: [
                { value: '1:3', text: '1:3 (–ú200)' },
                { value: '1:4', text: '1:4 (–ú150)' },
                { value: '1:5', text: '1:5 (–ú100)' },
                { value: '1:6', text: '1:6 (–ú75)' }
            ]}
        ],
        calculate: (inputs) => {
            const volumeM3 = convertUnit(inputs.volume, inputs.volumeUnit, '–º¬≥', 'volume');
            const [cementPart, sandPart] = inputs.ratio.split(':').map(Number);
            const totalParts = cementPart + sandPart;
            
            const cementVolume = volumeM3 * (cementPart / totalParts);
            const sandVolume = volumeM3 * (sandPart / totalParts);
            
            // –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ü–µ–º–µ–Ω—Ç–∞ ~1400 –∫–≥/–º¬≥
            const cementKg = cementVolume * 1400;
            const cementBags = Math.ceil(cementKg / 50); // 50 –∫–≥ –≤ –º–µ—à–∫–µ
            
            return `–¶–µ–º–µ–Ω—Ç: ${cementKg.toFixed(0)} –∫–≥ (${cementBags} –º–µ—à–∫–æ–≤), –ü–µ—Å–æ–∫: ${sandVolume.toFixed(2)} –º¬≥`;
        }
    },
    {
        id: 'reinforcement',
        title: '–†–∞—Å—á–µ—Ç –∞—Ä–º–∞—Ç—É—Ä—ã',
        description: '–ê—Ä–º–∞—Ç—É—Ä–∞ –¥–ª—è –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–∞',
        category: 'construction',
        icon: 'üî©',
        inputs: [
            { name: 'length', label: '–î–ª–∏–Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–º)', type: 'number', min: 0.1, step: 0.1 },
            { name: 'width', label: '–®–∏—Ä–∏–Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–º)', type: 'number', min: 0.1, step: 0.1 },
            { name: 'diameter', label: '–î–∏–∞–º–µ—Ç—Ä –∞—Ä–º–∞—Ç—É—Ä—ã (–º–º)', type: 'select', options: [
                { value: 8, text: '8 –º–º' },
                { value: 10, text: '10 –º–º' },
                { value: 12, text: '12 –º–º' },
                { value: 14, text: '14 –º–º' },
                { value: 16, text: '16 –º–º' }
            ]},
                        { name: 'spacing', label: '–®–∞–≥ –∞—Ä–º–∞—Ç—É—Ä—ã (—Å–º)', type: 'number', min: 10, max: 30, value: 20 },
            { name: 'layers', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤', type: 'number', min: 1, max: 2, value: 2 }
        ],
        calculate: (inputs) => {
            const spacingM = inputs.spacing / 100;
            
            // –ü—Ä–æ–¥–æ–ª—å–Ω–∞—è –∞—Ä–º–∞—Ç—É—Ä–∞
            const longitudinalBars = Math.ceil(inputs.width / spacingM) + 1;
            const longitudinalLength = longitudinalBars * inputs.length * inputs.layers;
            
            // –ü–æ–ø–µ—Ä–µ—á–Ω–∞—è –∞—Ä–º–∞—Ç—É—Ä–∞
            const transverseBars = Math.ceil(inputs.length / spacingM) + 1;
            const transverseLength = transverseBars * inputs.width * inputs.layers;
            
            const totalLength = longitudinalLength + transverseLength;
            
            // –í–µ—Å –∞—Ä–º–∞—Ç—É—Ä—ã (–∫–≥/–º)
            const weights = { 8: 0.395, 10: 0.617, 12: 0.888, 14: 1.21, 16: 1.58 };
            const totalWeight = totalLength * weights[inputs.diameter];
            
            return `${totalLength.toFixed(1)} –º (${totalWeight.toFixed(1)} –∫–≥)`;
        }
    },
    {
        id: 'foam_blocks',
        title: '–ü–µ–Ω–æ–±–ª–æ–∫–∏',
        description: '–†–∞—Å—á–µ—Ç –ø–µ–Ω–æ–±–ª–æ–∫–æ–≤ –¥–ª—è —Å—Ç–µ–Ω',
        category: 'construction',
        icon: '‚¨ú',
        inputs: [
            { name: 'length', label: '–î–ª–∏–Ω–∞ —Å—Ç–µ–Ω—ã (–º)', type: 'number', min: 0.1, step: 0.1 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ —Å—Ç–µ–Ω—ã (–º)', type: 'number', min: 0.1, step: 0.1 },
            { name: 'thickness', label: '–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω—ã (–º–º)', type: 'select', options: [
                { value: 200, text: '200 –º–º' },
                { value: 300, text: '300 –º–º' },
                { value: 400, text: '400 –º–º' }
            ]},
            { name: 'blockSize', label: '–†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞', type: 'select', options: [
                { value: '600x300x200', text: '600√ó300√ó200 –º–º' },
                { value: '600x400x200', text: '600√ó400√ó200 –º–º' },
                { value: '600x300x300', text: '600√ó300√ó300 –º–º' }
            ]},
            { name: 'openings', label: '–ü–ª–æ—â–∞–¥—å –ø—Ä–æ–µ–º–æ–≤ (–º¬≤)', type: 'number', min: 0, value: 0 }
        ],
        calculate: (inputs) => {
            const wallArea = inputs.length * inputs.height - inputs.openings;
            const [blockLength, blockHeight, blockWidth] = inputs.blockSize.split('x').map(n => parseInt(n) / 1000);
            
            let blockArea;
            if (inputs.thickness === blockWidth * 1000) {
                blockArea = blockLength * blockHeight;
            } else {
                blockArea = blockLength * blockWidth;
            }
            
            const blocks = Math.ceil(wallArea / blockArea * 1.05); // 5% –∑–∞–ø–∞—Å
            const glueKg = wallArea * 1.5; // ~1.5 –∫–≥/–º¬≤ –∫–ª–µ—è
            
            return `${blocks} –±–ª–æ–∫–æ–≤, ${glueKg.toFixed(0)} –∫–≥ –∫–ª–µ—è`;
        }
    },
    {
        id: 'roofing',
        title: '–ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
        description: '–†–∞—Å—á–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∫—Ä—ã—à–∏',
        category: 'construction',
        icon: 'üè†',
        inputs: [
            { name: 'roofType', label: '–¢–∏–ø –∫—Ä—ã—à–∏', type: 'select', options: [
                { value: 'single', text: '–û–¥–Ω–æ—Å–∫–∞—Ç–Ω–∞—è' },
                { value: 'gable', text: '–î–≤—É—Å–∫–∞—Ç–Ω–∞—è' },
                { value: 'hip', text: '–í–∞–ª—å–º–æ–≤–∞—è' },
                { value: 'mansard', text: '–ú–∞–Ω—Å–∞—Ä–¥–Ω–∞—è' }
            ]},
            { name: 'length', label: '–î–ª–∏–Ω–∞ –∑–¥–∞–Ω–∏—è (–º)', type: 'number', min: 1, step: 0.1 },
            { name: 'width', label: '–®–∏—Ä–∏–Ω–∞ –∑–¥–∞–Ω–∏—è (–º)', type: 'number', min: 1, step: 0.1 },
            { name: 'angle', label: '–£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ (¬∞)', type: 'number', min: 10, max: 60, value: 30 },
            { name: 'material', label: '–ú–∞—Ç–µ—Ä–∏–∞–ª', type: 'select', options: [
                { value: 'metal', text: '–ú–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü–∞' },
                { value: 'slate', text: '–®–∏—Ñ–µ—Ä' },
                { value: 'ondulin', text: '–û–Ω–¥—É–ª–∏–Ω' },
                { value: 'tile', text: '–ß–µ—Ä–µ–ø–∏—Ü–∞' }
            ]}
        ],
        calculate: (inputs) => {
            const angleRad = inputs.angle * Math.PI / 180;
            let roofArea;
            
            if (inputs.roofType === 'single') {
                roofArea = inputs.length * inputs.width / Math.cos(angleRad);
            } else if (inputs.roofType === 'gable') {
                roofArea = 2 * inputs.length * (inputs.width / 2) / Math.cos(angleRad);
            } else if (inputs.roofType === 'hip') {
                roofArea = (inputs.length + inputs.width) * inputs.width / Math.cos(angleRad);
            } else {
                roofArea = 2.2 * inputs.length * (inputs.width / 2) / Math.cos(angleRad);
            }
            
            const overlap = { metal: 1.1, slate: 1.15, ondulin: 1.1, tile: 1.2 };
            const totalArea = roofArea * overlap[inputs.material];
            
            return `${totalArea.toFixed(1)} –º¬≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞`;
        }
    },
    {
        id: 'siding',
        title: '–†–∞—Å—á–µ—Ç —Å–∞–π–¥–∏–Ω–≥–∞',
        description: '–°–∞–π–¥–∏–Ω–≥ –¥–ª—è —Ñ–∞—Å–∞–¥–∞',
        category: 'construction',
        icon: 'üè¢',
        inputs: [
            { name: 'perimeter', label: '–ü–µ—Ä–∏–º–µ—Ç—Ä –¥–æ–º–∞ (–º)', type: 'number', min: 1, step: 0.1 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ —Å—Ç–µ–Ω (–º)', type: 'number', min: 1, step: 0.1 },
            { name: 'openings', label: '–ü–ª–æ—â–∞–¥—å –æ–∫–æ–Ω –∏ –¥–≤–µ—Ä–µ–π (–º¬≤)', type: 'number', min: 0, value: 0 },
            { name: 'panelLength', label: '–î–ª–∏–Ω–∞ –ø–∞–Ω–µ–ª–∏ (–º)', type: 'number', value: 3.66 },
            { name: 'panelWidth', label: '–®–∏—Ä–∏–Ω–∞ –ø–∞–Ω–µ–ª–∏ (–º)', type: 'number', value: 0.23 }
        ],
        calculate: (inputs) => {
            const wallArea = inputs.perimeter * inputs.height - inputs.openings;
            const panelArea = inputs.panelLength * inputs.panelWidth;
            const panels = Math.ceil(wallArea / panelArea * 1.1); // 10% –∑–∞–ø–∞—Å
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            const corners = Math.ceil(inputs.height * 4 / 3); // –£–≥–ª—ã
            const jProfile = Math.ceil(panels / 2); // J-–ø—Ä–æ—Ñ–∏–ª—å
            
            return `${panels} –ø–∞–Ω–µ–ª–µ–π, ${corners} —É–≥–ª–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, ${jProfile} J-–ø—Ä–æ—Ñ–∏–ª–µ–π`;
        }
    },
    {
        id: 'plaster',
        title: '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ —Å—Ç–µ–Ω',
        description: '–†–∞—Å—á–µ—Ç —à—Ç—É–∫–∞—Ç—É—Ä–Ω–æ–π —Å–º–µ—Å–∏',
        category: 'construction',
        icon: 'üèóÔ∏è',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω (–º¬≤)', type: 'number', min: 0.1, step: 0.1 },
            { name: 'thickness', label: '–¢–æ–ª—â–∏–Ω–∞ —Å–ª–æ—è (–º–º)', type: 'number', min: 5, max: 50, value: 15 },
            { name: 'type', label: '–¢–∏–ø —à—Ç—É–∫–∞—Ç—É—Ä–∫–∏', type: 'select', options: [
                { value: 15, text: '–ì–∏–ø—Å–æ–≤–∞—è (15 –∫–≥/–º¬≤/—Å–º)' },
                { value: 17, text: '–¶–µ–º–µ–Ω—Ç–Ω–∞—è (17 –∫–≥/–º¬≤/—Å–º)' },
                { value: 8, text: '–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è (8 –∫–≥/–º¬≤/—Å–º)' }
            ]}
        ],
        calculate: (inputs) => {
            const consumption = inputs.type * (inputs.thickness / 10);
            const total = inputs.area * consumption;
            const bags = Math.ceil(total / 25); // 25 –∫–≥ –≤ –º–µ—à–∫–µ
            
            return `${total.toFixed(1)} –∫–≥ (${bags} –º–µ—à–∫–æ–≤ –ø–æ 25 –∫–≥)`;
        }
    },

    // Electrical / –≠–ª–µ–∫—Ç—Ä–∏–∫–∞
    {
        id: 'cable',
        title: '–°–µ—á–µ–Ω–∏–µ –∫–∞–±–µ–ª—è',
        description: '–†–∞—Å—á–µ—Ç —Å–µ—á–µ–Ω–∏—è –∫–∞–±–µ–ª—è –ø–æ –º–æ—â–Ω–æ—Å—Ç–∏',
        category: 'electric',
        icon: '‚ö°',
        inputs: [
            { name: 'power', label: '–ú–æ—â–Ω–æ—Å—Ç—å', type: 'number', min: 0.1, step: 0.1 },
            { name: 'powerUnit', label: '–ï–¥–∏–Ω–∏—Ü–∞ –º–æ—â–Ω–æ—Å—Ç–∏', type: 'select', options: [
                { value: '–∫–í—Ç', text: '–∫–í—Ç' },
                { value: '–í—Ç', text: '–í—Ç' }
            ]},
            { name: 'voltage', label: '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ', type: 'select', options: [
                { value: 220, text: '220–í (–æ–¥–Ω–æ—Ñ–∞–∑–Ω–æ–µ)' },
                { value: 380, text: '380–í (—Ç—Ä–µ—Ö—Ñ–∞–∑–Ω–æ–µ)' }
            ]},
            { name: 'length', label: '–î–ª–∏–Ω–∞ –∫–∞–±–µ–ª—è (–º)', type: 'number', min: 1 },
            { name: 'cableType', label: '–¢–∏–ø –∫–∞–±–µ–ª—è', type: 'select', options: [
                { value: 'copper', text: '–ú–µ–¥—å' },
                { value: 'aluminum', text: '–ê–ª—é–º–∏–Ω–∏–π' }
            ]}
        ],
        calculate: (inputs) => {
            const powerW = inputs.powerUnit === '–∫–í—Ç' ? inputs.power * 1000 : inputs.power;
            const current = inputs.voltage === 220 ? 
                powerW / inputs.voltage : 
                powerW / (inputs.voltage * 1.73);
            
            // –°–µ—á–µ–Ω–∏—è –¥–ª—è –º–µ–¥–∏/–∞–ª—é–º–∏–Ω–∏—è
            const sections = {
                copper: [
                    { current: 16, section: 1.5 },
                    { current: 25, section: 2.5 },
                    { current: 32, section: 4 },
                    { current: 40, section: 6 },
                    { current: 55, section: 10 },
                    { current: 75, section: 16 }
                ],
                aluminum: [
                    { current: 16, section: 2.5 },
                    { current: 25, section: 4 },
                    { current: 32, section: 6 },
                    { current: 40, section: 10 },
                    { current: 55, section: 16 },
                    { current: 75, section: 25 }
                ]
            };
            
            const sectionData = sections[inputs.cableType].find(s => s.current >= current) || 
                               sections[inputs.cableType][sections[inputs.cableType].length - 1];
            
            // –ü–æ—Ç–µ—Ä–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
            const resistance = inputs.cableType === 'copper' ? 0.0175 : 0.028;
            const voltageDrop = (2 * inputs.length * current * resistance) / sectionData.section;
            const dropPercent = (voltageDrop / inputs.voltage) * 100;
            
            return `${sectionData.section} –º–º¬≤ (—Ç–æ–∫ ${current.toFixed(1)}–ê, –ø–æ—Ç–µ—Ä–∏ ${dropPercent.toFixed(1)}%)`;
        }
    },
    {
        id: 'circuit_breaker',
        title: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å',
        description: '–ü–æ–¥–±–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∞ –ø–æ –º–æ—â–Ω–æ—Å—Ç–∏',
        category: 'electric',
        icon: 'üîå',
        inputs: [
            { name: 'power', label: '–°—É–º–º–∞—Ä–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç)', type: 'number', min: 0.1, step: 0.1 },
            { name: 'voltage', label: '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ', type: 'select', options: [
                { value: 220, text: '220–í' },
                { value: 380, text: '380–í' }
            ]},
            { name: 'powerFactor', label: '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏', type: 'number', min: 0.5, max: 1, step: 0.05, value: 0.95 }
        ],
        calculate: (inputs) => {
            const current = inputs.voltage === 220 ? 
                (inputs.power * 1000) / (inputs.voltage * inputs.powerFactor) : 
                (inputs.power * 1000) / (inputs.voltage * 1.73 * inputs.powerFactor);
            
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–æ–º–∏–Ω–∞–ª—ã –∞–≤—Ç–æ–º–∞—Ç–æ–≤
            const ratings = [6, 10, 16, 20, 25, 32, 40, 50, 63, 80, 100];
            const breaker = ratings.find(r => r >= current * 1.25) || ratings[ratings.length - 1];
            
            return `–ê–≤—Ç–æ–º–∞—Ç ${breaker}–ê (—Ä–∞—Å—á–µ—Ç–Ω—ã–π —Ç–æ–∫ ${current.toFixed(1)}–ê)`;
        }
    },
    {
        id: 'sockets',
        title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–∑–µ—Ç–æ–∫',
        description: '–†–∞—Å—á–µ—Ç —Ä–æ–∑–µ—Ç–æ–∫ –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è',
        category: 'electric',
        icon: 'üîå',
        inputs: [
            { name: 'roomType', label: '–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è', type: 'select', options: [
                { value: 'living', text: '–ñ–∏–ª–∞—è –∫–æ–º–Ω–∞—Ç–∞' },
                { value: 'kitchen', text: '–ö—É—Ö–Ω—è' },
                { value: 'bedroom', text: '–°–ø–∞–ª—å–Ω—è' },
                { value: 'office', text: '–ö–∞–±–∏–Ω–µ—Ç' },
                { value: 'bathroom', text: '–í–∞–Ω–Ω–∞—è' }
            ]},
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å (–º¬≤)', type: 'number', min: 1, step: 0.1 },
                        { name: 'perimeter', label: '–ü–µ—Ä–∏–º–µ—Ç—Ä (–º)', type: 'number', min: 1, step: 0.1 }
        ],
        calculate: (inputs) => {
            const standards = {
                living: { perM: 1, min: 4, additional: 2 },
                kitchen: { perM: 1.5, min: 6, additional: 3 },
                bedroom: { perM: 0.8, min: 3, additional: 1 },
                office: { perM: 1.2, min: 5, additional: 2 },
                bathroom: { perM: 0, min: 2, additional: 1 }
            };
            
            const standard = standards[inputs.roomType];
            const byPerimeter = Math.ceil(inputs.perimeter * standard.perM / 4); // –ö–∞–∂–¥—ã–µ 4–º
            const recommended = Math.max(byPerimeter, standard.min) + standard.additional;
            
            return `${recommended} —Ä–æ–∑–µ—Ç–æ–∫ (–º–∏–Ω–∏–º—É–º ${standard.min})`;
        }
    },
    {
        id: 'lighting',
        title: '–†–∞—Å—á–µ—Ç –æ—Å–≤–µ—â–µ–Ω–∏—è',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –º–æ—â–Ω–æ—Å—Ç—å —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤',
        category: 'electric',
        icon: 'üí°',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è (–º¬≤)', type: 'number', min: 1, step: 0.1 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ (–º)', type: 'number', min: 2, max: 5, step: 0.1, value: 2.7 },
            { name: 'roomType', label: '–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è', type: 'select', options: [
                { value: 150, text: '–°–ø–∞–ª—å–Ω—è (150 –ª–∫)' },
                { value: 200, text: '–ì–æ—Å—Ç–∏–Ω–∞—è (200 –ª–∫)' },
                { value: 300, text: '–ö—É—Ö–Ω—è (300 –ª–∫)' },
                { value: 400, text: '–†–∞–±–æ—á–∏–π –∫–∞–±–∏–Ω–µ—Ç (400 –ª–∫)' },
                { value: 50, text: '–ö–æ—Ä–∏–¥–æ—Ä (50 –ª–∫)' }
            ]},
            { name: 'lampType', label: '–¢–∏–ø –ª–∞–º–ø', type: 'select', options: [
                { value: 10, text: 'LED (10 –ª–º/–í—Ç)' },
                { value: 4, text: '–õ–∞–º–ø–∞ –Ω–∞–∫–∞–ª–∏–≤–∞–Ω–∏—è (4 –ª–º/–í—Ç)' },
                { value: 6, text: '–ì–∞–ª–æ–≥–µ–Ω–Ω–∞—è (6 –ª–º/–í—Ç)' }
            ]}
        ],
        calculate: (inputs) => {
            const heightCoef = inputs.height <= 2.7 ? 1 : inputs.height <= 3.5 ? 1.2 : 1.5;
            const totalLumens = inputs.area * inputs.roomType * heightCoef;
            const totalWatts = totalLumens / inputs.lampType;
            
            // –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤
            const lampPower = inputs.lampType === 10 ? 12 : inputs.lampType === 4 ? 60 : 35;
            const lampCount = Math.ceil(totalWatts / lampPower);
            
            return `${totalLumens.toFixed(0)} –ª–º, ${totalWatts.toFixed(0)} –í—Ç (${lampCount} –ª–∞–º–ø –ø–æ ${lampPower} –í—Ç)`;
        }
    },
    {
        id: 'electrical_load',
        title: '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞',
        description: '–†–∞—Å—á–µ—Ç –æ–±—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–∞',
        category: 'electric',
        icon: '‚ö°',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –¥–æ–º–∞ (–º¬≤)', type: 'number', min: 10, step: 1 },
            { name: 'heating', label: '–≠–ª–µ–∫—Ç—Ä–æ–æ—Ç–æ–ø–ª–µ–Ω–∏–µ', type: 'select', options: [
                { value: 0, text: '–ù–µ—Ç' },
                { value: 100, text: '–î–∞ (100 –í—Ç/–º¬≤)' }
            ]},
            { name: 'waterHeater', label: '–í–æ–¥–æ–Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å (–∫–í—Ç)', type: 'number', min: 0, max: 10, value: 2 },
            { name: 'kitchen', label: '–≠–ª–µ–∫—Ç—Ä–æ–ø–ª–∏—Ç–∞', type: 'select', options: [
                { value: 0, text: '–ù–µ—Ç' },
                { value: 7, text: '–î–∞ (7 –∫–í—Ç)' }
            ]}
        ],
        calculate: (inputs) => {
            // –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
            const baseLoad = inputs.area * 30; // 30 –í—Ç/–º¬≤
            const heatingLoad = inputs.area * inputs.heating;
            const totalLoad = (baseLoad + heatingLoad) / 1000 + inputs.waterHeater + inputs.kitchen;
            
            // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏
            const simultaneity = totalLoad < 10 ? 1 : totalLoad < 20 ? 0.8 : 0.65;
            const designLoad = totalLoad * simultaneity;
            
            // –¢–æ–∫
            const current = (designLoad * 1000) / 220;
            
            return `${totalLoad.toFixed(1)} –∫–í—Ç (—Ä–∞—Å—á–µ—Ç–Ω–∞—è ${designLoad.toFixed(1)} –∫–í—Ç, ${current.toFixed(0)}–ê)`;
        }
    },

    // Plumbing / –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞
    {
        id: 'radiators',
        title: '–†–∞—Å—á–µ—Ç —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞',
        category: 'plumbing',
        icon: 'üî•',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –∫–æ–º–Ω–∞—Ç—ã (–º¬≤)', type: 'number', min: 1, step: 0.1 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ (–º)', type: 'number', min: 2, step: 0.1, value: 2.7 },
            { name: 'windows', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω', type: 'number', min: 0, value: 1 },
            { name: 'outerWalls', label: '–ù–∞—Ä—É–∂–Ω—ã—Ö —Å—Ç–µ–Ω', type: 'number', min: 0, max: 4, value: 1 },
            { name: 'region', label: '–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–æ–Ω–∞', type: 'select', options: [
                { value: 0.8, text: '–Æ–∂–Ω–∞—è' },
                { value: 1, text: '–°—Ä–µ–¥–Ω—è—è –ø–æ–ª–æ—Å–∞' },
                { value: 1.2, text: '–°–µ–≤–µ—Ä–Ω–∞—è' }
            ]},
            { name: 'sectionPower', label: '–ú–æ—â–Ω–æ—Å—Ç—å —Å–µ–∫—Ü–∏–∏ (–í—Ç)', type: 'number', value: 160 }
        ],
        calculate: (inputs) => {
            const baseHeat = 100; // –í—Ç/–º¬≤
            const heightCoef = inputs.height / 2.7;
            const windowCoef = 1 + (inputs.windows - 1) * 0.1;
            const wallCoef = 1 + (inputs.outerWalls - 1) * 0.1;
            
            const totalPower = inputs.area * baseHeat * heightCoef * windowCoef * wallCoef * inputs.region;
            const sections = Math.ceil(totalPower / inputs.sectionPower);
            
            return `${sections} —Å–µ–∫—Ü–∏–π (${totalPower.toFixed(0)} –í—Ç)`;
        }
    },
    {
        id: 'water_pipes',
        title: '–í–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω—ã–µ —Ç—Ä—É–±—ã',
        description: '–î–∏–∞–º–µ—Ç—Ä —Ç—Ä—É–± –¥–ª—è –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è',
        category: 'plumbing',
        icon: 'üö∞',
        inputs: [
            { name: 'fixtures', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤–æ–¥–æ—Ä–∞–∑–±–æ—Ä–∞', type: 'number', min: 1, max: 20 },
            { name: 'simultaneous', label: '–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö', type: 'number', min: 1, max: 10, value: 2 },
            { name: 'length', label: '–î–ª–∏–Ω–∞ –º–∞–≥–∏—Å—Ç—Ä–∞–ª–∏ (–º)', type: 'number', min: 1 },
            { name: 'material', label: '–ú–∞—Ç–µ—Ä–∏–∞–ª —Ç—Ä—É–±', type: 'select', options: [
                { value: 'plastic', text: '–ü–ª–∞—Å—Ç–∏–∫' },
                { value: 'metal', text: '–ú–µ—Ç–∞–ª–ª' },
                { value: 'copper', text: '–ú–µ–¥—å' }
            ]}
        ],
        calculate: (inputs) => {
            // –†–∞—Å—Ö–æ–¥ –≤–æ–¥—ã –ª/—Å
            const flowRates = { 1: 0.2, 2: 0.3, 3: 0.4, 4: 0.5, 5: 0.6 };
            const flow = flowRates[Math.min(inputs.simultaneous, 5)] || 0.7;
            
            // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–∏–∞–º–µ—Ç—Ä—ã
            let diameter;
            if (flow <= 0.3) diameter = 16;
            else if (flow <= 0.5) diameter = 20;
            else if (flow <= 0.8) diameter = 25;
            else diameter = 32;
            
            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä—É–±
            const pipes = Math.ceil(inputs.length / 3); // –¢—Ä—É–±—ã –ø–æ 3–º
            
            return `–î–∏–∞–º–µ—Ç—Ä ${diameter} –º–º, ${pipes} —Ç—Ä—É–± –ø–æ 3–º`;
        }
    },
    {
        id: 'septic_tank',
        title: '–û–±—ä–µ–º —Å–µ–ø—Ç–∏–∫–∞',
        description: '–†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ —Å–µ–ø—Ç–∏–∫–∞',
        category: 'plumbing',
        icon: 'üöΩ',
        inputs: [
            { name: 'people', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–ª—å—Ü–æ–≤', type: 'number', min: 1, max: 10 },
            { name: 'waterUsage', label: '–†–∞—Å—Ö–æ–¥ –≤–æ–¥—ã –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (–ª/—Å—É—Ç–∫–∏)', type: 'number', min: 100, max: 300, value: 200 },
            { name: 'days', label: '–î–Ω–µ–π –¥–æ –æ—Ç–∫–∞—á–∫–∏', type: 'number', min: 3, max: 14, value: 3 }
        ],
        calculate: (inputs) => {
            const dailyVolume = inputs.people * inputs.waterUsage;
            const totalVolume = dailyVolume * inputs.days / 1000; // –≤ –º¬≥
            const recommendedVolume = Math.ceil(totalVolume * 10) / 10; // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 0.1 –º¬≥
            
            return `${recommendedVolume} –º¬≥ (${dailyVolume} –ª/—Å—É—Ç–∫–∏)`;
        }
    },
    {
        id: 'pump_power',
        title: '–ú–æ—â–Ω–æ—Å—Ç—å –Ω–∞—Å–æ—Å–∞',
        description: '–ü–æ–¥–±–æ—Ä –Ω–∞—Å–æ—Å–∞ –¥–ª—è –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è',
        category: 'plumbing',
        icon: 'üíß',
        inputs: [
            { name: 'depth', label: '–ì–ª—É–±–∏–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω—ã/–∫–æ–ª–æ–¥—Ü–∞ (–º)', type: 'number', min: 1 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ –ø–æ–¥—ä–µ–º–∞ (–º)', type: 'number', min: 0 },
            { name: 'distance', label: '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –¥–æ–º–∞ (–º)', type: 'number', min: 0 },
            { name: 'flow', label: '–¢—Ä–µ–±—É–µ–º—ã–π —Ä–∞—Å—Ö–æ–¥ (–ª/–º–∏–Ω)', type: 'number', min: 10, max: 100, value: 30 }
        ],
        calculate: (inputs) => {
            // –û–±—â–∏–π –Ω–∞–ø–æ—Ä = –≥–ª—É–±–∏–Ω–∞ + –≤—ã—Å–æ—Ç–∞ + –ø–æ—Ç–µ—Ä–∏ (10–º –Ω–∞ 100–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏) + –∑–∞–ø–∞—Å
            const totalHead = inputs.depth + inputs.height + (inputs.distance / 10) + 10;
            
            // –ú–æ—â–Ω–æ—Å—Ç—å –Ω–∞—Å–æ—Å–∞ (–∫–í—Ç) = (Q * H * œÅ * g) / (3600 * Œ∑)
            // Q - —Ä–∞—Å—Ö–æ–¥ (–º¬≥/—á), H - –Ω–∞–ø–æ—Ä (–º), Œ∑ - –ö–ü–î (0.6)
            const flowM3h = inputs.flow * 60 / 1000;
            const power = (flowM3h * totalHead * 1000 * 9.81) / (3600 * 0.6 * 1000);
            
            return `–ù–∞–ø–æ—Ä ${totalHead.toFixed(0)} –º, –º–æ—â–Ω–æ—Å—Ç—å ${power.toFixed(1)} –∫–í—Ç`;
        }
    },
    {
        id: 'underfloor_heating',
        title: '–¢–µ–ø–ª—ã–π –ø–æ–ª',
        description: '–†–∞—Å—á–µ—Ç –≤–æ–¥—è–Ω–æ–≥–æ —Ç–µ–ø–ª–æ–≥–æ –ø–æ–ª–∞',
        category: 'plumbing',
        icon: '‚ô®Ô∏è',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –ø–æ–ª–∞ (–º¬≤)', type: 'number', min: 1, step: 0.1 },
            { name: 'heatLoss', label: '–¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏ (–í—Ç/–º¬≤)', type: 'number', min: 50, max: 150, value: 100 },
            { name: 'pipeSpacing', label: '–®–∞–≥ —É–∫–ª–∞–¥–∫–∏ (—Å–º)', type: 'select', options: [
                { value: 10, text: '10 —Å–º' },
                { value: 15, text: '15 —Å–º' },
                { value: 20, text: '20 —Å–º' },
                { value: 25, text: '25 —Å–º' }
            ]}
        ],
        calculate: (inputs) => {
            const pipeLength = inputs.area * (100 / inputs.pipeSpacing) * 1.1; // 10% –∑–∞–ø–∞—Å
            const circuits = Math.ceil(pipeLength / 100); // –ú–∞–∫—Å 100–º –Ω–∞ –∫–æ–Ω—Ç—É—Ä
            const totalPower = inputs.area * inputs.heatLoss;
            
            return `${pipeLength.toFixed(0)} –º —Ç—Ä—É–±—ã, ${circuits} –∫–æ–Ω—Ç—É—Ä–æ–≤, ${totalPower} –í—Ç`;
        }
    },

    // Cooking / –ö—É–ª–∏–Ω–∞—Ä–∏—è
    {
        id: 'portions',
        title: '–ü–µ—Ä–µ—Å—á–µ—Ç –ø–æ—Ä—Ü–∏–π',
        description: '–ü–µ—Ä–µ—Å—á–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π',
        category: 'cooking',
        icon: 'üë®‚Äçüç≥',
        inputs: [
            { name: 'originalPortions', label: '–ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π', type: 'number', min: 1, value: 4 },
            { name: 'newPortions', label: '–ù—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π', type: 'number', min: 1 },
            { name: 'ingredient', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞', type: 'number', min: 0, step: 0.1 },
            { name: 'unit', label: '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è', type: 'select', options: [
                { value: '–≥', text: '–≥—Ä–∞–º–º—ã' },
                { value: '–∫–≥', text: '–∫–∏–ª–æ–≥—Ä–∞–º–º—ã' },
                { value: '–º–ª', text: '–º–∏–ª–ª–∏–ª–∏—Ç—Ä—ã' },
                { value: '–ª', text: '–ª–∏—Ç—Ä—ã' },
                                { value: '—à—Ç', text: '—à—Ç—É–∫–∏' },
                { value: '—Å—Ç.–ª.', text: '—Å—Ç–æ–ª–æ–≤—ã–µ –ª–æ–∂–∫–∏' },
                { value: '—á.–ª.', text: '—á–∞–π–Ω—ã–µ –ª–æ–∂–∫–∏' },
                { value: '—Å—Ç–∞–∫–∞–Ω', text: '—Å—Ç–∞–∫–∞–Ω—ã' }
            ]}
        ],
        calculate: (inputs) => {
            const ratio = inputs.newPortions / inputs.originalPortions;
            const newAmount = inputs.ingredient * ratio;
            
            // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã
            let result;
            if (inputs.unit === '—à—Ç') {
                result = Math.round(newAmount);
            } else if (inputs.unit === '—Å—Ç.–ª.' || inputs.unit === '—á.–ª.') {
                result = Math.round(newAmount * 2) / 2; // –î–æ 0.5
            } else {
                result = Math.round(newAmount * 10) / 10; // –î–æ 0.1
            }
            
            return `${result} ${inputs.unit}`;
        }
    },
    {
        id: 'calories',
        title: '–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –±–ª—é–¥–∞',
        description: '–†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –Ω–∞ –ø–æ—Ä—Ü–∏—é',
        category: 'cooking',
        icon: 'ü•ó',
        inputs: [
            { name: 'totalCalories', label: '–û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (–∫–∫–∞–ª)', type: 'number', min: 1 },
            { name: 'totalWeight', label: '–û–±—â–∏–π –≤–µ—Å –±–ª—é–¥–∞', type: 'number', min: 1 },
            { name: 'weightUnit', label: '–ï–¥–∏–Ω–∏—Ü–∞ –≤–µ—Å–∞', type: 'select', options: [
                { value: '–≥', text: '–≥—Ä–∞–º–º—ã' },
                { value: '–∫–≥', text: '–∫–∏–ª–æ–≥—Ä–∞–º–º—ã' }
            ]},
            { name: 'portionWeight', label: '–í–µ—Å –ø–æ—Ä—Ü–∏–∏ (–≥)', type: 'number', min: 1 },
            { name: 'portions', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π', type: 'number', min: 1, value: 1 }
        ],
        calculate: (inputs) => {
            const totalWeightG = inputs.weightUnit === '–∫–≥' ? inputs.totalWeight * 1000 : inputs.totalWeight;
            const caloriesPerGram = inputs.totalCalories / totalWeightG;
            const portionCalories = caloriesPerGram * inputs.portionWeight;
            const totalPortionCalories = portionCalories * inputs.portions;
            
            return `${Math.round(portionCalories)} –∫–∫–∞–ª –Ω–∞ –ø–æ—Ä—Ü–∏—é (–≤—Å–µ–≥–æ ${Math.round(totalPortionCalories)} –∫–∫–∞–ª)`;
        }
    },
    {
        id: 'baking_converter',
        title: '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è –≤—ã–ø–µ—á–∫–∏',
        description: '–ü–µ—Ä–µ—Å—á–µ—Ç —Ñ–æ—Ä–º –¥–ª—è –≤—ã–ø–µ—á–∫–∏',
        category: 'cooking',
        icon: 'üç∞',
        inputs: [
            { name: 'originalSize', label: '–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ä–º—ã (—Å–º)', type: 'number', min: 10, max: 50 },
            { name: 'originalShape', label: '–ò—Å—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞', type: 'select', options: [
                { value: 'round', text: '–ö—Ä—É–≥–ª–∞—è' },
                { value: 'square', text: '–ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è' },
                { value: 'rect', text: '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è' }
            ]},
            { name: 'newSize', label: '–ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ä–º—ã (—Å–º)', type: 'number', min: 10, max: 50 },
            { name: 'newShape', label: '–ù–æ–≤–∞—è —Ñ–æ—Ä–º–∞', type: 'select', options: [
                { value: 'round', text: '–ö—Ä—É–≥–ª–∞—è' },
                { value: 'square', text: '–ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è' },
                { value: 'rect', text: '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è' }
            ]}
        ],
        calculate: (inputs) => {
            let originalArea, newArea;
            
            if (inputs.originalShape === 'round') {
                originalArea = Math.PI * Math.pow(inputs.originalSize / 2, 2);
            } else if (inputs.originalShape === 'square') {
                originalArea = Math.pow(inputs.originalSize, 2);
            } else {
                originalArea = inputs.originalSize * inputs.originalSize * 0.8; // –ü—Ä–∏–º–µ—Ä–Ω–æ
            }
            
            if (inputs.newShape === 'round') {
                newArea = Math.PI * Math.pow(inputs.newSize / 2, 2);
            } else if (inputs.newShape === 'square') {
                newArea = Math.pow(inputs.newSize, 2);
            } else {
                newArea = inputs.newSize * inputs.newSize * 0.8;
            }
            
            const ratio = newArea / originalArea;
            const percent = Math.round((ratio - 1) * 100);
            
            return `–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç ${ratio.toFixed(2)} (${percent > 0 ? '+' : ''}${percent}%)`;
        }
    },
    {
        id: 'marinade',
        title: '–†–∞—Å—á–µ—Ç –º–∞—Ä–∏–Ω–∞–¥–∞',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∏–Ω–∞–¥–∞ –¥–ª—è –º—è—Å–∞/—Ä—ã–±—ã',
        category: 'cooking',
        icon: 'ü•©',
        inputs: [
            { name: 'weight', label: '–í–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞', type: 'number', min: 0.1, step: 0.1 },
            { name: 'weightUnit', label: '–ï–¥–∏–Ω–∏—Ü–∞ –≤–µ—Å–∞', type: 'select', options: [
                { value: '–∫–≥', text: '–∫–≥' },
                { value: '–≥', text: '–≥' }
            ]},
            { name: 'type', label: '–¢–∏–ø –º–∞—Ä–∏–Ω–∞–¥–∞', type: 'select', options: [
                { value: 0.3, text: '–°—É—Ö–æ–π (30%)' },
                { value: 0.5, text: '–ü–æ–ª—É—Å—É—Ö–æ–π (50%)' },
                { value: 1, text: '–ñ–∏–¥–∫–∏–π (100%)' }
            ]},
            { name: 'intensity', label: '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å', type: 'select', options: [
                { value: 0.8, text: '–õ–µ–≥–∫–∏–π' },
                { value: 1, text: '–°—Ä–µ–¥–Ω–∏–π' },
                { value: 1.3, text: '–ù–∞—Å—ã—â–µ–Ω–Ω—ã–π' }
            ]}
        ],
        calculate: (inputs) => {
            const weightKg = inputs.weightUnit === '–≥' ? inputs.weight / 1000 : inputs.weight;
            const marinadeL = weightKg * inputs.type * inputs.intensity;
            const marinadeMl = marinadeL * 1000;
            
            // –í—Ä–µ–º—è –º–∞—Ä–∏–Ω–æ–≤–∞–Ω–∏—è
            const timeHours = inputs.type === 0.3 ? 2 : inputs.type === 0.5 ? 4 : 8;
            
            return `${marinadeMl.toFixed(0)} –º–ª –º–∞—Ä–∏–Ω–∞–¥–∞ (${timeHours} —á–∞—Å–æ–≤ –º–∞—Ä–∏–Ω–æ–≤–∞–Ω–∏—è)`;
        }
    },
    {
        id: 'banquet',
        title: '–†–∞—Å—á–µ—Ç –¥–ª—è –±–∞–Ω–∫–µ—Ç–∞',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥—ã –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        category: 'cooking',
        icon: 'üéâ',
        inputs: [
            { name: 'guests', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π', type: 'number', min: 1 },
            { name: 'duration', label: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∞—Å—ã)', type: 'number', min: 1, max: 12, value: 4 },
            { name: 'type', label: '–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', type: 'select', options: [
                { value: 'light', text: '–§—É—Ä—à–µ—Ç' },
                { value: 'medium', text: '–ë–∞–Ω–∫–µ—Ç' },
                { value: 'full', text: '–°–≤–∞–¥—å–±–∞' }
            ]}
        ],
        calculate: (inputs) => {
            const portions = {
                light: { salad: 150, hot: 200, snacks: 100, dessert: 100 },
                medium: { salad: 200, hot: 300, snacks: 150, dessert: 150 },
                full: { salad: 250, hot: 400, snacks: 200, dessert: 200 }
            };
            
            const p = portions[inputs.type];
            const coef = inputs.duration <= 3 ? 0.8 : inputs.duration <= 5 ? 1 : 1.2;
            
            return `–°–∞–ª–∞—Ç—ã: ${(p.salad * inputs.guests * coef / 1000).toFixed(1)} –∫–≥, ` +
                   `–ì–æ—Ä—è—á–µ–µ: ${(p.hot * inputs.guests * coef / 1000).toFixed(1)} –∫–≥, ` +
                   `–ó–∞–∫—É—Å–∫–∏: ${(p.snacks * inputs.guests * coef / 1000).toFixed(1)} –∫–≥, ` +
                   `–î–µ—Å–µ—Ä—Ç—ã: ${(p.dessert * inputs.guests * coef / 1000).toFixed(1)} –∫–≥`;
        }
    },

    // Garden / –°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ
    {
        id: 'fertilizer',
        title: '–†–∞—Å—á–µ—Ç —É–¥–æ–±—Ä–µ–Ω–∏–π',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–æ–±—Ä–µ–Ω–∏–π –¥–ª—è —É—á–∞—Å—Ç–∫–∞',
        category: 'garden',
        icon: 'üå±',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞', type: 'number', min: 0.1, step: 0.1 },
            { name: 'areaUnit', label: '–ï–¥–∏–Ω–∏—Ü–∞ –ø–ª–æ—â–∞–¥–∏', type: 'select', options: [
                { value: '–º¬≤', text: '–º¬≤' },
                { value: '—Å–æ—Ç–∫–∞', text: '—Å–æ—Ç–∫–∏' },
                { value: '–≥–∞', text: '–≥–µ–∫—Ç–∞—Ä—ã' }
            ]},
            { name: 'fertilizer', label: '–¢–∏–ø —É–¥–æ–±—Ä–µ–Ω–∏—è', type: 'select', options: [
                { value: 30, text: '–ê–∑–æ—Ç–Ω—ã–µ (30 –≥/–º¬≤)' },
                { value: 40, text: '–§–æ—Å—Ñ–æ—Ä–Ω—ã–µ (40 –≥/–º¬≤)' },
                { value: 20, text: '–ö–∞–ª–∏–π–Ω—ã–µ (20 –≥/–º¬≤)' },
                { value: 50, text: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ (50 –≥/–º¬≤)' },
                { value: 5000, text: '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ (5 –∫–≥/–º¬≤)' }
            ]},
            { name: 'season', label: '–°–µ–∑–æ–Ω', type: 'select', options: [
                { value: 1, text: '–í–µ—Å–Ω–∞' },
                { value: 0.7, text: '–õ–µ—Ç–æ' },
                { value: 0.8, text: '–û—Å–µ–Ω—å' }
            ]}
        ],
        calculate: (inputs) => {
            let areaM2;
            if (inputs.areaUnit === '—Å–æ—Ç–∫–∞') areaM2 = inputs.area * 100;
            else if (inputs.areaUnit === '–≥–∞') areaM2 = inputs.area * 10000;
            else areaM2 = inputs.area;
            
            const amount = areaM2 * inputs.fertilizer * inputs.season;
            
            if (inputs.fertilizer === 5000) {
                return `${(amount / 1000).toFixed(1)} –∫–≥ (${Math.ceil(amount / 50000)} –º–µ—à–∫–æ–≤ –ø–æ 50 –∫–≥)`;
            } else {
                return `${(amount / 1000).toFixed(1)} –∫–≥`;
            }
        }
    },
    {
        id: 'seeds',
        title: '–†–∞—Å—á–µ—Ç —Å–µ–º—è–Ω',
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–º—è–Ω –¥–ª—è –ø–æ—Å–µ–≤–∞',
        category: 'garden',
        icon: 'üåæ',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –ø–æ—Å–µ–≤–∞ (–º¬≤)', type: 'number', min: 0.1, step: 0.1 },
            { name: 'crop', label: '–ö—É–ª—å—Ç—É—Ä–∞', type: 'select', options: [
                { value: 2, text: '–ì–∞–∑–æ–Ω–Ω–∞—è —Ç—Ä–∞–≤–∞ (20 –≥/–º¬≤)' },
                { value: 0.3, text: '–ú–æ—Ä–∫–æ–≤—å (3 –≥/–º¬≤)' },
                { value: 0.5, text: '–°–≤–µ–∫–ª–∞ (5 –≥/–º¬≤)' },
                { value: 0.2, text: '–û–≥—É—Ä—Ü—ã (2 –≥/–º¬≤)' },
                { value: 0.1, text: '–¢–æ–º–∞—Ç—ã (1 –≥/–º¬≤)' },
                { value: 15, text: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å (150 –≥/–º¬≤)' }
            ]},
            { name: 'method', label: '–°–ø–æ—Å–æ–± –ø–æ—Å–µ–≤–∞', type: 'select', options: [
                { value: 1, text: '–†—è–¥–æ–≤–æ–π' },
                { value: 1.2, text: '–†–∞–∑–±—Ä–æ—Å–Ω–æ–π (+20%)' },
                { value: 0.8, text: '–¢–æ—á–Ω—ã–π (-20%)' }
            ]}
        ],
        calculate: (inputs) => {
            const seeds = inputs.area * inputs.crop * 10 * inputs.method; // *10 –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –≥—Ä–∞–º–º—ã
            
            if (seeds < 100) {
                return `${seeds.toFixed(1)} –≥ (${Math.ceil(seeds / 5)} –ø–∞–∫–µ—Ç–æ–≤ –ø–æ 5 –≥)`;
            } else if (seeds < 1000) {
                return `${seeds.toFixed(0)} –≥`;
            } else {
                return `${(seeds / 1000).toFixed(1)} –∫–≥`;
            }
        }
    },
    {
        id: 'greenhouse_film',
        title: '–ü–ª–µ–Ω–∫–∞ –¥–ª—è —Ç–µ–ø–ª–∏—Ü—ã',
        description: '–†–∞—Å—á–µ—Ç –ø–ª–µ–Ω–∫–∏ –¥–ª—è —Ç–µ–ø–ª–∏—Ü—ã',
        category: 'garden',
        icon: 'üè°',
        inputs: [
            { name: 'length', label: '–î–ª–∏–Ω–∞ —Ç–µ–ø–ª–∏—Ü—ã (–º)', type: 'number', min: 1, step: 0.5 },
            { name: 'width', label: '–®–∏—Ä–∏–Ω–∞ —Ç–µ–ø–ª–∏—Ü—ã (–º)', type: 'number', min: 1, step: 0.5 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ —Ç–µ–ø–ª–∏—Ü—ã (–º)', type: 'number', min: 1.5, step: 0.1, value: 2 },
            { name: 'shape', label: '–§–æ—Ä–º–∞ –∫—Ä—ã—à–∏', type: 'select', options: [
                { value: 'arc', text: '–ê—Ä–æ—á–Ω–∞—è' },
                { value: 'gable', text: '–î–≤—É—Å–∫–∞—Ç–Ω–∞—è' },
                { value: 'single', text: '–û–¥–Ω–æ—Å–∫–∞—Ç–Ω–∞—è' }
            ]},
            { name: 'filmWidth', label: '–®–∏—Ä–∏–Ω–∞ –ø–ª–µ–Ω–∫–∏ (–º)', type: 'number', value: 3 }
        ],
        calculate: (inputs) => {
            let area;
            if (inputs.shape === 'arc') {
                const arc = Math.PI * inputs.width / 2;
                area = (arc + inputs.height * 2) * inputs.length + inputs.width * inputs.height * 2;
                        } else if (inputs.shape === 'gable') {
                area = inputs.length * (inputs.width + inputs.height * 2) + 
                       inputs.width * inputs.height * 2 + 
                       inputs.width * inputs.height; // –§—Ä–æ–Ω—Ç–æ–Ω—ã
            } else {
                area = inputs.length * (inputs.width + inputs.height) + 
                       inputs.width * inputs.height * 2;
            }
            
            area *= 1.15; // 15% –Ω–∞ –Ω–∞—Ö–ª–µ—Å—Ç –∏ –∫—Ä–µ–ø–ª–µ–Ω–∏–µ
            const strips = Math.ceil(area / (inputs.filmWidth * inputs.length));
            const totalLength = strips * inputs.length;
            
            return `${area.toFixed(1)} –º¬≤ –ø–ª–µ–Ω–∫–∏ (${totalLength.toFixed(1)} –ø–æ–≥–æ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤)`;
        }
    },
    {
        id: 'watering_system',
        title: '–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–∏–≤–∞',
        description: '–†–∞—Å—á–µ—Ç —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞',
        category: 'garden',
        icon: 'üíß',
        inputs: [
            { name: 'beds', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—è–¥–æ–∫', type: 'number', min: 1 },
            { name: 'bedLength', label: '–î–ª–∏–Ω–∞ –≥—Ä—è–¥–∫–∏ (–º)', type: 'number', min: 1, step: 0.5 },
            { name: 'rows', label: '–†—è–¥–æ–≤ –Ω–∞ –≥—Ä—è–¥–∫–µ', type: 'number', min: 1, max: 4, value: 2 },
            { name: 'plantSpacing', label: '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ (—Å–º)', type: 'number', min: 10, max: 100, value: 30 }
        ],
        calculate: (inputs) => {
            const totalLength = inputs.beds * inputs.bedLength * inputs.rows;
            const drippers = Math.ceil((inputs.bedLength * 100) / inputs.plantSpacing) * inputs.rows * inputs.beds;
            const mainPipe = inputs.beds * 3; // –ü–æ 3–º –Ω–∞ –≥—Ä—è–¥–∫—É
            
            return `–ö–∞–ø–µ–ª—å–Ω–∞—è –ª–µ–Ω—Ç–∞: ${totalLength} –º, –ö–∞–ø–µ–ª—å–Ω–∏—Ü—ã: ${drippers} —à—Ç, –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω–∞—è —Ç—Ä—É–±–∞: ${mainPipe} –º`;
        }
    },
    {
        id: 'soil',
        title: '–ì—Ä—É–Ω—Ç –¥–ª—è –≥—Ä—è–¥–æ–∫',
        description: '–†–∞—Å—á–µ—Ç –≥—Ä—É–Ω—Ç–∞ –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –≥—Ä—è–¥–æ–∫',
        category: 'garden',
        icon: 'üåç',
        inputs: [
            { name: 'length', label: '–î–ª–∏–Ω–∞ –≥—Ä—è–¥–∫–∏ (–º)', type: 'number', min: 0.5, step: 0.1 },
            { name: 'width', label: '–®–∏—Ä–∏–Ω–∞ –≥—Ä—è–¥–∫–∏ (–º)', type: 'number', min: 0.3, step: 0.1 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ –≥—Ä—è–¥–∫–∏ (—Å–º)', type: 'number', min: 15, max: 80, value: 30 },
            { name: 'beds', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—è–¥–æ–∫', type: 'number', min: 1, value: 1 },
            { name: 'composition', label: '–°–æ—Å—Ç–∞–≤ –≥—Ä—É–Ω—Ç–∞', type: 'select', options: [
                { value: 'standard', text: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π' },
                { value: 'light', text: '–õ–µ–≥–∫–∏–π' },
                { value: 'heavy', text: '–¢—è–∂–µ–ª—ã–π' }
            ]}
        ],
        calculate: (inputs) => {
            const volumeM3 = inputs.length * inputs.width * (inputs.height / 100) * inputs.beds;
            const volumeL = volumeM3 * 1000;
            
            let composition = '';
            if (inputs.composition === 'standard') {
                composition = ` (—Ç–æ—Ä—Ñ ${(volumeL * 0.3).toFixed(0)}–ª, –∫–æ–º–ø–æ—Å—Ç ${(volumeL * 0.3).toFixed(0)}–ª, –ø–µ—Å–æ–∫ ${(volumeL * 0.4).toFixed(0)}–ª)`;
            }
            
            const bags50L = Math.ceil(volumeL / 50);
            
            return `${volumeM3.toFixed(2)} –º¬≥ (${volumeL.toFixed(0)} –ª, ${bags50L} –º–µ—à–∫–æ–≤ –ø–æ 50–ª)${composition}`;
        }
    },

    // Auto / –ê–≤—Ç–æ–º–æ–±–∏–ª—å
    {
        id: 'fuel',
        title: '–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞',
        description: '–†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –ø–æ–µ–∑–¥–∫—É',
        category: 'auto',
        icon: '‚õΩ',
        inputs: [
            { name: 'distance', label: '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)', type: 'number', min: 1 },
            { name: 'consumption', label: '–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞', type: 'number', min: 1, step: 0.1 },
            { name: 'consumptionType', label: '–¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞', type: 'select', options: [
                { value: 'l100', text: '–ª/100–∫–º' },
                { value: 'mpg', text: '–º–∏–ª—å/–≥–∞–ª–ª–æ–Ω' }
            ]},
            { name: 'fuelPrice', label: '–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±/–ª)', type: 'number', min: 1, step: 0.01 },
            { name: 'passengers', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤', type: 'number', min: 1, max: 8, value: 1 }
        ],
        calculate: (inputs) => {
            let consumptionL100;
            if (inputs.consumptionType === 'mpg') {
                consumptionL100 = 235.214 / inputs.consumption; // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ MPG
            } else {
                consumptionL100 = inputs.consumption;
            }
            
            const fuel = (inputs.distance * consumptionL100) / 100;
            const totalCost = fuel * inputs.fuelPrice;
            const costPerPerson = totalCost / inputs.passengers;
            
            return `${fuel.toFixed(1)} –ª, ${totalCost.toFixed(0)} —Ä—É–± (${costPerPerson.toFixed(0)} —Ä—É–±/—á–µ–ª)`;
        }
    },
    {
        id: 'car_paint',
        title: '–ö—Ä–∞—Å–∫–∞ –¥–ª—è –∞–≤—Ç–æ',
        description: '–†–∞—Å—á–µ—Ç –∫—Ä–∞—Å–∫–∏ –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è',
        category: 'auto',
        icon: 'üé®',
        inputs: [
            { name: 'parts', label: '–î–µ—Ç–∞–ª–∏ –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏', type: 'select', options: [
                { value: 0.5, text: '–ë–∞–º–ø–µ—Ä' },
                { value: 0.8, text: '–ö–∞–ø–æ—Ç' },
                { value: 0.6, text: '–ö—Ä—ã–ª–æ' },
                { value: 1.2, text: '–î–≤–µ—Ä—å' },
                { value: 1.5, text: '–ö—Ä—ã—à–∞' },
                { value: 8, text: '–í–µ—Å—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å' }
            ]},
            { name: 'layers', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤', type: 'number', min: 2, max: 4, value: 3 },
            { name: 'paintType', label: '–¢–∏–ø –∫—Ä–∞—Å–∫–∏', type: 'select', options: [
                { value: 'base', text: '–ë–∞–∑–∞ + –ª–∞–∫' },
                { value: 'acrylic', text: '–ê–∫—Ä–∏–ª' },
                { value: 'metallic', text: '–ú–µ—Ç–∞–ª–ª–∏–∫' }
            ]}
        ],
        calculate: (inputs) => {
            const baseConsumption = 0.25; // –ª/–º¬≤
            const area = inputs.parts;
            let paint = area * baseConsumption * inputs.layers;
            
            if (inputs.paintType === 'metallic') paint *= 1.2;
            
            const primer = area * 0.15;
            const clearcoat = inputs.paintType === 'base' ? area * 0.2 : 0;
            
            return `–ö—Ä–∞—Å–∫–∞: ${paint.toFixed(1)} –ª, –ì—Ä—É–Ω—Ç: ${primer.toFixed(1)} –ª${clearcoat > 0 ? `, –õ–∞–∫: ${clearcoat.toFixed(1)} –ª` : ''}`;
        }
    },
    {
        id: 'antifreeze',
        title: '–ê–Ω—Ç–∏—Ñ—Ä–∏–∑',
        description: '–†–∞—Å—á–µ—Ç –∞–Ω—Ç–∏—Ñ—Ä–∏–∑–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è',
        category: 'auto',
        icon: '‚ùÑÔ∏è',
        inputs: [
            { name: 'engineVolume', label: '–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª)', type: 'number', min: 0.8, max: 6, step: 0.1 },
            { name: 'systemVolume', label: '–û–±—ä–µ–º —Å–∏—Å—Ç–µ–º—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è (–ª)', type: 'number', min: 3, max: 15, value: 6 },
            { name: 'concentration', label: '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –∞–Ω—Ç–∏—Ñ—Ä–∏–∑–∞', type: 'select', options: [
                { value: 30, text: '30% (–¥–æ -15¬∞C)' },
                { value: 40, text: '40% (–¥–æ -25¬∞C)' },
                { value: 50, text: '50% (–¥–æ -35¬∞C)' },
                { value: 60, text: '60% (–¥–æ -45¬∞C)' }
            ]}
        ],
        calculate: (inputs) => {
            const antifreeze = inputs.systemVolume * (inputs.concentration / 100);
            const water = inputs.systemVolume - antifreeze;
            
            return `–ê–Ω—Ç–∏—Ñ—Ä–∏–∑: ${antifreeze.toFixed(1)} –ª, –î–∏—Å—Ç–∏–ª–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–æ–¥–∞: ${water.toFixed(1)} –ª`;
        }
    },
    {
        id: 'oil_change',
        title: '–ú–æ—Ç–æ—Ä–Ω–æ–µ –º–∞—Å–ª–æ',
        description: '–†–∞—Å—á–µ—Ç –º–∞—Å–ª–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã',
        category: 'auto',
        icon: 'üõ¢Ô∏è',
        inputs: [
            { name: 'engineType', label: '–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è', type: 'select', options: [
                { value: 'small', text: '–ú–∞–ª–æ–ª–∏—Ç—Ä–∞–∂–Ω—ã–π (–¥–æ 1.6–ª)' },
                { value: 'medium', text: '–°—Ä–µ–¥–Ω–∏–π (1.6-2.5–ª)' },
                { value: 'large', text: '–ë–æ–ª—å—à–æ–π (–±–æ–ª–µ–µ 2.5–ª)' },
                { value: 'diesel', text: '–î–∏–∑–µ–ª—å–Ω—ã–π' }
            ]},
            { name: 'oilVolume', label: '–û–±—ä–µ–º –º–∞—Å–ª–∞ –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É (–ª)', type: 'number', min: 2, max: 10, step: 0.1, value: 4 },
            { name: 'filterChange', label: '–ó–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞', type: 'select', options: [
                { value: 0.3, text: '–î–∞ (+0.3–ª)' },
                { value: 0, text: '–ù–µ—Ç' }
            ]}
        ],
        calculate: (inputs) => {
            const totalOil = inputs.oilVolume + inputs.filterChange;
            const canisters5L = Math.ceil(totalOil / 5);
            const canisters1L = Math.ceil((totalOil % 5));
            
            return `${totalOil.toFixed(1)} –ª –º–∞—Å–ª–∞ (${canisters5L} –∫–∞–Ω–∏—Å—Ç—Ä –ø–æ 5–ª${canisters1L > 0 ? ` + ${canisters1L}–ª` : ''})`;
        }
    },

    // Other / –î—Ä—É–≥–æ–µ
    {
        id: 'stairs',
        title: '–†–∞—Å—á–µ—Ç –ª–µ—Å—Ç–Ω–∏—Ü—ã',
        description: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–µ—Å—Ç–Ω–∏—Ü—ã',
        category: 'other',
        icon: 'ü™ú',
        inputs: [
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ –ø–æ–¥—ä–µ–º–∞', type: 'number', min: 100 },
            { name: 'heightUnit', label: '–ï–¥–∏–Ω–∏—Ü–∞ –≤—ã—Å–æ—Ç—ã', type: 'select', options: [
                { value: '–º–º', text: '–º–º' },
                { value: '—Å–º', text: '—Å–º' },
                { value: '–º', text: '–º' }
            ]},
            { name: 'angle', label: '–£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ (¬∞)', type: 'number', min: 25, max: 45, value: 35 },
            { name: 'stepHeight', label: '–í—ã—Å–æ—Ç–∞ —Å—Ç—É–ø–µ–Ω–∏ (–º–º)', type: 'number', min: 150, max: 200, value: 170 }
        ],
        calculate: (inputs) => {
            const heightMm = convertUnit(inputs.height, inputs.heightUnit, '–º–º', 'length');
            const steps = Math.round(heightMm / inputs.stepHeight);
            const actualStepHeight = heightMm / steps;
            
            // –ì–ª—É–±–∏–Ω–∞ —Å—Ç—É–ø–µ–Ω–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ 2h + d = 600-640
            const stepDepth = 620 - 2 * actualStepHeight;
            
            // –î–ª–∏–Ω–∞ –ª–µ—Å—Ç–Ω–∏—Ü—ã
            const lengthMm = steps * stepDepth;
            const lengthM = lengthMm / 1000;
            
            return `${steps} —Å—Ç—É–ø–µ–Ω–µ–π (–≤—ã—Å–æ—Ç–∞ ${actualStepHeight.toFixed(0)} –º–º, –≥–ª—É–±–∏–Ω–∞ ${stepDepth.toFixed(0)} –º–º), –¥–ª–∏–Ω–∞ ${lengthM.toFixed(2)} –º`;
        }
    },
    {
        id: 'fence',
        title: '–†–∞—Å—á–µ—Ç –∑–∞–±–æ—Ä–∞',
        description: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞–±–æ—Ä–∞',
        category: 'other',
        icon: 'üöß',
        inputs: [
            { name: 'length', label: '–î–ª–∏–Ω–∞ –∑–∞–±–æ—Ä–∞ (–º)', type: 'number', min: 1 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ –∑–∞–±–æ—Ä–∞ (–º)', type: 'number', min: 1, step: 0.1 },
            { name: 'type', label: '–¢–∏–ø –∑–∞–±–æ—Ä–∞', type: 'select', options: [
                { value: 'proflist', text: '–ü—Ä–æ—Ñ–ª–∏—Å—Ç' },
                { value: 'wood', text: '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π' },
                { value: 'mesh', text: '–°–µ—Ç–∫–∞-—Ä–∞–±–∏—Ü–∞' },
                { value: 'brick', text: '–ö–∏—Ä–ø–∏—á–Ω—ã–π' }
            ]},
            { name: 'postSpacing', label: '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç–æ–ª–±–∞–º–∏ (–º)', type: 'number', min: 1.5, max: 4, value: 2.5 }
        ],
        calculate: (inputs) => {
            const posts = Math.ceil(inputs.length / inputs.postSpacing) + 1;
            const area = inputs.length * inputs.height;
            
            let materials = `${posts} —Å—Ç–æ–ª–±–æ–≤, `;
            
            if (inputs.type === 'proflist') {
                const sheets = Math.ceil(inputs.length / 1.15); // –®–∏—Ä–∏–Ω–∞ –ª–∏—Å—Ç–∞ 1.15–º
                materials += `${sheets} –ª–∏—Å—Ç–æ–≤ –ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª–∞`;
            } else if (inputs.type === 'wood') {
                const boards = Math.ceil(area * 10); // ~10 –¥–æ—Å–æ–∫ –Ω–∞ –º¬≤
                materials += `${boards} –¥–æ—Å–æ–∫`;
            } else if (inputs.type === 'mesh') {
                const rolls = Math.ceil(inputs.length / 10); // –†—É–ª–æ–Ω 10–º
                materials += `${rolls} —Ä—É–ª–æ–Ω–æ–≤ —Å–µ—Ç–∫–∏ (10–º)`;
            } else if (inputs.type === 'brick') {
                const bricks = Math.ceil(area * 400); // ~400 –∫–∏—Ä–ø–∏—á–µ–π –Ω–∞ –º¬≤
                materials += `${bricks} –∫–∏—Ä–ø–∏—á–µ–π`;
            }
            
            // –ë–µ—Ç–æ–Ω –¥–ª—è —Å—Ç–æ–ª–±–æ–≤
            const concretePerPost = 0.05; // –º¬≥ –Ω–∞ —Å—Ç–æ–ª–±
            const totalConcrete = posts * concretePerPost;
            
            return `${materials}, –±–µ—Ç–æ–Ω ${totalConcrete.toFixed(2)} –º¬≥`;
        }
    },
    {
        id: 'gates',
        title: '–†–∞—Å—á–µ—Ç –≤–æ—Ä–æ—Ç',
        description: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –≤–æ—Ä–æ—Ç',
        category: 'other',
        icon: 'üö™',
        inputs: [
            { name: 'width', label: '–®–∏—Ä–∏–Ω–∞ –ø—Ä–æ–µ–º–∞ (–º)', type: 'number', min: 2, max: 6, step: 0.1 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ –≤–æ—Ä–æ—Ç (–º)', type: 'number', min: 1.5, max: 3, step: 0.1 },
            { name: 'type', label: '–¢–∏–ø –≤–æ—Ä–æ—Ç', type: 'select', options: [
                { value: 'swing', text: '–†–∞—Å–ø–∞—à–Ω—ã–µ' },
                { value: 'sliding', text: '–û—Ç–∫–∞—Ç–Ω—ã–µ' },
                { value: 'sectional', text: '–°–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ' },
                { value: 'roller', text: '–†—É–ª–æ–Ω–Ω—ã–µ' }
            ]},
            { name: 'material', label: '–ú–∞—Ç–µ—Ä–∏–∞–ª', type: 'select', options: [
                { value: 'proflist', text: '–ü—Ä–æ—Ñ–ª–∏—Å—Ç' },
                { value: 'wood', text: '–î–µ—Ä–µ–≤–æ' },
                { value: 'metal', text: '–ú–µ—Ç–∞–ª–ª' }
            ]}
        ],
        calculate: (inputs) => {
            const area = inputs.width * inputs.height;
            let result = '';
            
            if (inputs.type === 'swing') {
                const leafArea = area / 2;
                result = `2 —Å—Ç–≤–æ—Ä–∫–∏ –ø–æ ${leafArea.toFixed(1)} –º¬≤, `;
                result += `–ø–µ—Ç–ª–∏ 4-6 —à—Ç, `;
            } else if (inputs.type === 'sliding') {
                result = `–ü–æ–ª–æ—Ç–Ω–æ ${area.toFixed(1)} –º¬≤, `;
                result += `–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∞—è ${(inputs.width * 1.5).toFixed(1)} –º, `;
                result += `—Ä–æ–ª–∏–∫–∏ 2 —à—Ç, `;
            }
            
            // –ú–∞—Ç–µ—Ä–∏–∞–ª
            if (inputs.material === 'proflist') {
                const sheets = Math.ceil(area / (1.15 * 2)); // –õ–∏—Å—Ç 1.15√ó2–º
                result += `–ø—Ä–æ—Ñ–ª–∏—Å—Ç ${sheets} –ª–∏—Å—Ç–æ–≤`;
            } else if (inputs.material === 'wood') {
                const boards = Math.ceil(area * 12);
                result += `–¥–æ—Å–∫–∏ ${boards} —à—Ç`;
            } else {
                result += `–º–µ—Ç–∞–ª–ª ${(area * 40).toFixed(0)} –∫–≥`; // ~40 –∫–≥/–º¬≤
            }
            
            return result;
        }
    },
    {
        id: 'canopy',
        title: '–†–∞—Å—á–µ—Ç –Ω–∞–≤–µ—Å–∞',
        description: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –Ω–∞–≤–µ—Å–∞',
        category: 'other',
        icon: '‚õ±Ô∏è',
        inputs: [
            { name: 'length', label: '–î–ª–∏–Ω–∞ –Ω–∞–≤–µ—Å–∞ (–º)', type: 'number', min: 2, step: 0.5 },
            { name: 'width', label: '–®–∏—Ä–∏–Ω–∞ –Ω–∞–≤–µ—Å–∞ (–º)', type: 'number', min: 2, step: 0.5 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ (–º)', type: 'number', min: 2, max: 4, step: 0.1, value: 2.5 },
            { name: 'roofType', label: '–¢–∏–ø –∫—Ä—ã—à–∏', type: 'select', options: [
                { value: 'single', text: '–û–¥–Ω–æ—Å–∫–∞—Ç–Ω–∞—è' },
                { value: 'gable', text: '–î–≤—É—Å–∫–∞—Ç–Ω–∞—è' },
                { value: 'arc', text: '–ê—Ä–æ—á–Ω–∞—è' }
            ]},
            { name: 'posts', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä', type: 'number', min: 4, max: 12, value: 4 }
        ],
        calculate: (inputs) => {
            let roofArea = inputs.length * inputs.width;
            if (inputs.roofType === 'gable') roofArea *= 1.15;
            else if (inputs.roofType === 'arc') roofArea *= 1.25;
            
            // –ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è —Ç—Ä—É–±–∞ –¥–ª—è –∫–∞—Ä–∫–∞—Å–∞
            const perimeter = 2 * (inputs.length + inputs.width);
            const beams = perimeter + inputs.length * 2; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–∫–∏
            const postsLength = inputs.posts * inputs.height;
            const totalPipe = beams + postsLength;
            
            // –ö—Ä–æ–≤–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
            const roofSheets = Math.ceil(roofArea / 2.3); // –õ–∏—Å—Ç ~2.3 –º¬≤
            
            return `–ü—Ä–æ—Ñ—Ç—Ä—É–±–∞ ${totalPipe.toFixed(1)} –º, –∫—Ä–æ–≤–ª—è ${roofSheets} –ª–∏—Å—Ç–æ–≤ (${roofArea.toFixed(1)} –º¬≤)`;
        }
    },
    {
        id: 'gazebo',
        title: '–†–∞—Å—á–µ—Ç –±–µ—Å–µ–¥–∫–∏',
        description: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –±–µ—Å–µ–¥–∫–∏',
        category: 'other',
        icon: 'üè°',
        inputs: [
            { name: 'shape', label: '–§–æ—Ä–º–∞ –±–µ—Å–µ–¥–∫–∏', type: 'select', options: [
                { value: 'square', text: '–ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è' },
                { value: 'rect', text: '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è' },
                { value: 'hex', text: '–®–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∞—è' },
                { value: 'oct', text: '–í–æ—Å—å–º–∏—É–≥–æ–ª—å–Ω–∞—è' }
            ]},
            { name: 'size', label: '–†–∞–∑–º–µ—Ä (–º)', type: 'number', min: 2, max: 6, step: 0.5, value: 3 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ (–º)', type: 'number', min: 2, max: 3.5, step: 0.1, value: 2.5 },
            { name: 'floor', label: '–ü–æ–ª', type: 'select', options: [
                { value: 'wood', text: '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π' },
                { value: 'tile', text: '–ü–ª–∏—Ç–∫–∞' },
                { value: 'concrete', text: '–ë–µ—Ç–æ–Ω' }
            ]}
        ],
        calculate: (inputs) => {
            let area, perimeter, posts;
            
            if (inputs.shape === 'square') {
                area = inputs.size * inputs.size;
                perimeter = 4 * inputs.size;
                posts = 4;
            } else if (inputs.shape === 'rect') {
                area = inputs.size * inputs.size * 1.5;
                perimeter = 2 * (inputs.size + inputs.size * 1.5);
                posts = 6;
            } else if (inputs.shape === 'hex') {
                area = 2.598 * inputs.size * inputs.size;
                perimeter = 6 * inputs.size;
                posts = 6;
            } else {
                area = 2.828 * inputs.size * inputs.size;
                perimeter = 8 * inputs.size * 0.765;
                posts = 8;
            }
            
            // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
            const roofArea = area * 1.3; // –° —É—á–µ—Ç–æ–º —Å–≤–µ—Å–æ–≤
            let floorMaterial = '';
            
            if (inputs.floor === 'wood') {
                floorMaterial = `–¥–æ—Å–∫–∞ ${(area * 1.1 * 100 / 15).toFixed(0)} —à—Ç`;
            } else if (inputs.floor === 'tile') {
                floorMaterial = `–ø–ª–∏—Ç–∫–∞ ${Math.ceil(area * 1.1)} –º¬≤`;
            } else {
                floorMaterial = `–±–µ—Ç–æ–Ω ${(area * 0.1).toFixed(1)} –º¬≥`;
            }
            
            return `–ü–ª–æ—â–∞–¥—å ${area.toFixed(1)} –º¬≤, —Å—Ç–æ–ª–±—ã ${posts} —à—Ç, –∫—Ä–æ–≤–ª—è ${roofArea.toFixed(1)} –º¬≤, ${floorMaterial}`;
        }
    },
    {
        id: 'linear_materials',
        title: '–ü–æ–≥–æ–Ω–∞–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è',
        description: '–†–∞—Å—á–µ—Ç –¥–æ—Å–æ–∫, –±—Ä—É—Å—å–µ–≤, –ø—Ä–æ—Ñ–∏–ª–µ–π',
        category: 'other',
        icon: 'üìè',
        inputs: [
            { name: 'totalLength', label: '–û–±—â–∞—è –¥–ª–∏–Ω–∞ (–º)', type: 'number', min: 0.1, step: 0.1 },
            { name: 'pieceLength', label: '–î–ª–∏–Ω–∞ –æ–¥–Ω–æ–π —à—Ç—É–∫–∏ (–º)', type: 'number', min: 1, max: 6, value: 3 },
            { name: 'waste', label: '–û—Ç—Ö–æ–¥—ã (%)', type: 'number', min: 0, max: 20, value: 5 },
            { name: 'joints', label: '–£—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç—ã–∫–∏', type: 'select', options: [
                { value: 0, text: '–ù–µ—Ç' },
                { value: 0.1, text: '–î–∞ (–∑–∞–∑–æ—Ä 10 —Å–º)' }
            ]}
        ],
        calculate: (inputs) => {
            const totalWithWaste = inputs.totalLength * (1 + inputs.waste / 100);
            const pieces = Math.ceil(totalWithWaste / (inputs.pieceLength - inputs.joints));
            const actualLength = pieces * inputs.pieceLength;
            const realWaste = ((actualLength - inputs.totalLength) / inputs.totalLength * 100).toFixed(1);
            
            return `${pieces} —à—Ç—É–∫ (${actualLength.toFixed(1)} –º, —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã ${realWaste}%)`;
        }
    },
    {
        id: 'mosquito_net',
        title: '–ú–æ—Å–∫–∏—Ç–Ω—ã–µ —Å–µ—Ç–∫–∏',
        description: '–†–∞—Å—á–µ—Ç –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫',
        category: 'other',
        icon: 'ü¶ü',
        inputs: [
            { name: 'windowWidth', label: '–®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ (–º–º)', type: 'number', min: 300, max: 3000 },
            { name: 'windowHeight', label: '–í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞ (–º–º)', type: 'number', min: 300, max: 3000 },
            { name: 'quantity', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω', type: 'number', min: 1, value: 1 },
            { name: 'type', label: '–¢–∏–ø —Å–µ—Ç–∫–∏', type: 'select', options: [
                { value: 'frame', text: '–†–∞–º–æ—á–Ω–∞—è' },
                { value: 'roll', text: '–†—É–ª–æ–Ω–Ω–∞—è' },
                { value: 'plisse', text: '–ü–ª–∏—Å—Å–µ' }
            ]}
        ],
        calculate: (inputs) => {
            const widthM = inputs.windowWidth / 1000;
            const heightM = inputs.windowHeight / 1000;
            const perimeter = 2 * (widthM + heightM);
            const area = widthM * heightM;
            
            const totalArea = area * inputs.quantity;
            const totalPerimeter = perimeter * inputs.quantity;
            
            let materials = '';
            if (inputs.type === 'frame') {
                materials = `–ø—Ä–æ—Ñ–∏–ª—å ${totalPerimeter.toFixed(1)} –º, —Å–µ—Ç–∫–∞ ${totalArea.toFixed(1)} –º¬≤, —É–≥–æ–ª–∫–∏ ${inputs.quantity * 4} —à—Ç`;
            } else if (inputs.type === 'roll') {
                materials = `–∫–æ—Ä–æ–± ${inputs.quantity} —à—Ç, —Å–µ—Ç–∫–∞ ${(totalArea * 1.2).toFixed(1)} –º¬≤`;
            } else {
                materials = `–∫–æ–º–ø–ª–µ–∫—Ç –ø–ª–∏—Å—Å–µ ${inputs.quantity} —à—Ç`;
            }
            
            return materials;
        }
    },
    {
        id: 'blinds',
        title: '–†–∞—Å—á–µ—Ç –∂–∞–ª—é–∑–∏',
        description: '–ñ–∞–ª—é–∑–∏ –¥–ª—è –æ–∫–æ–Ω',
        category: 'other',
        icon: 'ü™ü',
        inputs: [
            { name: 'windowWidth', label: '–®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ (—Å–º)', type: 'number', min: 30, max: 300 },
            { name: 'windowHeight', label: '–í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞ (—Å–º)', type: 'number', min: 30, max: 300 },
            { name: 'mounting', label: '–¢–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è', type: 'select', options: [
                { value: 'inside', text: '–í –ø—Ä–æ–µ–º' },
                { value: 'outside', text: '–ù–∞ –ø—Ä–æ–µ–º (+10 —Å–º)' },
                { value: 'ceiling', text: '–ö –ø–æ—Ç–æ–ª–∫—É' }
            ]},
            { name: 'type', label: '–¢–∏–ø –∂–∞–ª—é–∑–∏', type: 'select', options: [
                { value: 'horizontal', text: '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ' },
                { value: 'vertical', text: '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ' },
                { value: 'roll', text: '–†—É–ª–æ–Ω–Ω—ã–µ' }
            ]}
        ],
        calculate: (inputs) => {
            let width = inputs.windowWidth;
            let height = inputs.windowHeight;
            
            if (inputs.mounting === 'outside') {
                width += 10;
                height += 10;
            }
            
            const area = (width * height) / 10000; // –≤ –º¬≤
            
            let result = `–†–∞–∑–º–µ—Ä ${width}√ó${height} —Å–º (${area.toFixed(2)} –º¬≤)`;
            
            if (inputs.type === 'vertical') {
                const lamellas = Math.ceil(width / 8.9); // –õ–∞–º–µ–ª—å 89 –º–º
                result += `, ${lamellas} –ª–∞–º–µ–ª–µ–π`;
            }
            
            return result;
        }
    },
    {
        id: 'carpet',
        title: '–†–∞—Å—á–µ—Ç –∫–æ–≤—Ä–æ–ª–∏–Ω–∞',
        description: '–ö–æ–≤—Ä–æ–ª–∏–Ω –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è',
        category: 'other',
        icon: 'üü¶',
        inputs: [
            { name: 'roomLength', label: '–î–ª–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã (–º)', type: 'number', min: 1, step: 0.1 },
            { name: 'roomWidth', label: '–®–∏—Ä–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã (–º)', type: 'number', min: 1, step: 0.1 },
            { name: 'rollWidth', label: '–®–∏—Ä–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞ (–º)', type: 'select', options: [
                { value: 2, text: '2 –º' },
                { value: 3, text: '3 –º' },
                { value: 4, text: '4 –º' },
                { value: 5, text: '5 –º' }
            ]},
            { name: 'direction', label: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∫–ª–∞–¥–∫–∏', type: 'select', options: [
                                { value: 'optimal', text: '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ' },
                { value: 'length', text: '–í–¥–æ–ª—å –¥–ª–∏–Ω—ã' },
                { value: 'width', text: '–í–¥–æ–ª—å —à–∏—Ä–∏–Ω—ã' }
            ]},
            { name: 'reserve', label: '–ó–∞–ø–∞—Å (%)', type: 'number', min: 0, max: 15, value: 5 }
        ],
        calculate: (inputs) => {
            let strips, totalLength;
            
            if (inputs.direction === 'optimal') {
                // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ—Ç—Ö–æ–¥–∞–º–∏
                const stripsAlongLength = Math.ceil(inputs.roomWidth / inputs.rollWidth);
                const stripsAlongWidth = Math.ceil(inputs.roomLength / inputs.rollWidth);
                
                if (stripsAlongLength * inputs.roomLength < stripsAlongWidth * inputs.roomWidth) {
                    strips = stripsAlongLength;
                    totalLength = inputs.roomLength;
                } else {
                    strips = stripsAlongWidth;
                    totalLength = inputs.roomWidth;
                }
            } else if (inputs.direction === 'length') {
                strips = Math.ceil(inputs.roomWidth / inputs.rollWidth);
                totalLength = inputs.roomLength;
            } else {
                strips = Math.ceil(inputs.roomLength / inputs.rollWidth);
                totalLength = inputs.roomWidth;
            }
            
            const carpetLength = strips * totalLength * (1 + inputs.reserve / 100);
            const area = inputs.roomLength * inputs.roomWidth;
            
            return `${carpetLength.toFixed(1)} –º –ø–æ–≥–æ–Ω–Ω—ã—Ö (${strips} –ø–æ–ª–æ—Å), –ø–ª–æ—â–∞–¥—å ${area.toFixed(1)} –º¬≤`;
        }
    },
    {
        id: 'linoleum',
        title: '–†–∞—Å—á–µ—Ç –ª–∏–Ω–æ–ª–µ—É–º–∞',
        description: '–õ–∏–Ω–æ–ª–µ—É–º –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è',
        category: 'other',
        icon: 'üü´',
        inputs: [
            { name: 'roomLength', label: '–î–ª–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã (–º)', type: 'number', min: 1, step: 0.1 },
            { name: 'roomWidth', label: '–®–∏—Ä–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã (–º)', type: 'number', min: 1, step: 0.1 },
            { name: 'rollWidth', label: '–®–∏—Ä–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞ (–º)', type: 'select', options: [
                { value: 1.5, text: '1.5 –º' },
                { value: 2, text: '2 –º' },
                { value: 2.5, text: '2.5 –º' },
                { value: 3, text: '3 –º' },
                { value: 3.5, text: '3.5 –º' },
                { value: 4, text: '4 –º' },
                { value: 5, text: '5 –º' }
            ]},
            { name: 'pattern', label: '–†–∏—Å—É–Ω–æ–∫', type: 'select', options: [
                { value: 0, text: '–ë–µ–∑ –ø–æ–¥–±–æ—Ä–∞' },
                { value: 0.5, text: '–° –ø–æ–¥–±–æ—Ä–æ–º (+0.5–º –Ω–∞ –ø–æ–ª–æ—Å—É)' }
            ]}
        ],
        calculate: (inputs) => {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            let strips, length, width;
            
            if (inputs.roomWidth <= inputs.rollWidth) {
                // –û–¥–Ω–∞ –ø–æ–ª–æ—Å–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
                strips = 1;
                length = inputs.roomLength;
                width = inputs.roomWidth;
            } else if (inputs.roomLength <= inputs.rollWidth) {
                // –û–¥–Ω–∞ –ø–æ–ª–æ—Å–∞ –Ω–∞ –≤—Å—é –¥–ª–∏–Ω—É
                strips = 1;
                length = inputs.roomWidth;
                width = inputs.roomLength;
            } else {
                // –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–æ—Å
                const stripsAlongLength = Math.ceil(inputs.roomWidth / inputs.rollWidth);
                const stripsAlongWidth = Math.ceil(inputs.roomLength / inputs.rollWidth);
                
                if (stripsAlongLength <= stripsAlongWidth) {
                    strips = stripsAlongLength;
                    length = inputs.roomLength;
                } else {
                    strips = stripsAlongWidth;
                    length = inputs.roomWidth;
                }
            }
            
            const totalLength = strips * (length + inputs.pattern) + 0.1; // +10—Å–º –Ω–∞ –ø–æ–¥—Ä–µ–∑–∫—É
            const area = totalLength * inputs.rollWidth;
            
            return `${totalLength.toFixed(1)} –º –ø–æ–≥–æ–Ω–Ω—ã—Ö (${strips} –ø–æ–ª–æ—Å${strips > 1 ? ', –±—É–¥—É—Ç —à–≤—ã' : ', –±–µ–∑ —à–≤–æ–≤'}), ${area.toFixed(1)} –º¬≤`;
        }
    },
        // Additional calculators to reach 100 / –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –¥–æ 100

    // More Repair calculators / –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã —Ä–µ–º–æ–Ω—Ç–∞
    {
        id: 'tile_adhesive',
        title: '–ü–ª–∏—Ç–æ—á–Ω—ã–π –∫–ª–µ–π',
        description: '–†–∞—Å—á–µ—Ç –∫–ª–µ—è –¥–ª—è –ø–ª–∏—Ç–∫–∏',
        category: 'repair',
        icon: 'üîß',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å —É–∫–ª–∞–¥–∫–∏ (–º¬≤)', type: 'number', min: 0.1, step: 0.1 },
            { name: 'tileSize', label: '–†–∞–∑–º–µ—Ä –ø–ª–∏—Ç–∫–∏', type: 'select', options: [
                { value: 3, text: '–î–æ 10√ó10 —Å–º (3 –º–º)' },
                { value: 4, text: '10√ó10 - 20√ó20 —Å–º (4 –º–º)' },
                { value: 5, text: '20√ó20 - 30√ó30 —Å–º (5 –º–º)' },
                { value: 6, text: '30√ó30 - 40√ó40 —Å–º (6 –º–º)' },
                { value: 8, text: '–ë–æ–ª–µ–µ 40√ó40 —Å–º (8 –º–º)' }
            ]},
            { name: 'surface', label: '–¢–∏–ø –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏', type: 'select', options: [
                { value: 1, text: '–†–æ–≤–Ω–∞—è' },
                { value: 1.2, text: '–ù–µ—Ä–æ–≤–Ω–∞—è (+20%)' }
            ]}
        ],
        calculate: (inputs) => {
            const consumption = 1.5; // –∫–≥/–º¬≤/–º–º
            const adhesive = inputs.area * inputs.tileSize * consumption * inputs.surface;
            const bags = Math.ceil(adhesive / 25);
            
            return `${adhesive.toFixed(1)} –∫–≥ (${bags} –º–µ—à–∫–æ–≤ –ø–æ 25 –∫–≥)`;
        }
    },
    {
        id: 'floor_leveling',
        title: '–ù–∞–ª–∏–≤–Ω–æ–π –ø–æ–ª',
        description: '–†–∞—Å—á–µ—Ç —Å–º–µ—Å–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è',
        category: 'repair',
        icon: 'üèóÔ∏è',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –ø–æ–ª–∞ (–º¬≤)', type: 'number', min: 0.1, step: 0.1 },
            { name: 'thickness', label: '–¢–æ–ª—â–∏–Ω–∞ —Å–ª–æ—è (–º–º)', type: 'number', min: 1, max: 100, value: 5 },
            { name: 'type', label: '–¢–∏–ø —Å–º–µ—Å–∏', type: 'select', options: [
                { value: 1.5, text: '–ë–∞–∑–æ–≤–∞—è (1.5 –∫–≥/–º¬≤/–º–º)' },
                { value: 1.7, text: '–§–∏–Ω–∏—à–Ω–∞—è (1.7 –∫–≥/–º¬≤/–º–º)' },
                { value: 2, text: '–¢–æ–ª—Å—Ç–æ—Å–ª–æ–π–Ω–∞—è (2 –∫–≥/–º¬≤/–º–º)' }
            ]}
        ],
        calculate: (inputs) => {
            const mixture = inputs.area * inputs.thickness * inputs.type;
            const bags = Math.ceil(mixture / 25);
            const water = mixture * 0.2; // ~20% –≤–æ–¥—ã
            
            return `${mixture.toFixed(1)} –∫–≥ —Å–º–µ—Å–∏ (${bags} –º–µ—à–∫–æ–≤), ${water.toFixed(1)} –ª –≤–æ–¥—ã`;
        }
    },
    {
        id: 'window_slopes',
        title: '–û—Ç–∫–æ—Å—ã –¥–ª—è –æ–∫–æ–Ω',
        description: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ—Ç–∫–æ—Å–æ–≤',
        category: 'repair',
        icon: 'ü™ü',
        inputs: [
            { name: 'windows', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω', type: 'number', min: 1 },
            { name: 'width', label: '–®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ (–º)', type: 'number', min: 0.5, max: 3, step: 0.1 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞ (–º)', type: 'number', min: 0.5, max: 3, step: 0.1 },
            { name: 'depth', label: '–ì–ª—É–±–∏–Ω–∞ –æ—Ç–∫–æ—Å–∞ (—Å–º)', type: 'number', min: 10, max: 50, value: 20 },
            { name: 'material', label: '–ú–∞—Ç–µ—Ä–∏–∞–ª', type: 'select', options: [
                { value: 'plaster', text: '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞' },
                { value: 'drywall', text: '–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω' },
                { value: 'plastic', text: '–ü–ª–∞—Å—Ç–∏–∫' }
            ]}
        ],
        calculate: (inputs) => {
            const perimeter = 2 * (inputs.width + inputs.height);
            const area = perimeter * (inputs.depth / 100) * inputs.windows;
            
            let result = '';
            if (inputs.material === 'plaster') {
                const plaster = area * 15; // 15 –∫–≥/–º¬≤
                result = `${plaster.toFixed(1)} –∫–≥ —à—Ç—É–∫–∞—Ç—É—Ä–∫–∏`;
            } else if (inputs.material === 'drywall') {
                const sheets = Math.ceil(area / 3); // –ª–∏—Å—Ç 3 –º¬≤
                result = `${sheets} –ª–∏—Å—Ç–æ–≤ –≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω–∞`;
            } else {
                const panels = Math.ceil(perimeter * inputs.windows / 3); // –ø–∞–Ω–µ–ª—å 3–º
                result = `${panels} –ø–∞–Ω–µ–ª–µ–π –ø–æ 3–º`;
            }
            
            return result + `, –ø–ª–æ—â–∞–¥—å ${area.toFixed(2)} –º¬≤`;
        }
    },
    {
        id: 'door_trim',
        title: '–ù–∞–ª–∏—á–Ω–∏–∫–∏ –¥–ª—è –¥–≤–µ—Ä–µ–π',
        description: '–†–∞—Å—á–µ—Ç –Ω–∞–ª–∏—á–Ω–∏–∫–æ–≤',
        category: 'repair',
        icon: 'üö™',
        inputs: [
            { name: 'doors', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π', type: 'number', min: 1 },
            { name: 'doorWidth', label: '–®–∏—Ä–∏–Ω–∞ –¥–≤–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–µ–º–∞ (—Å–º)', type: 'number', min: 60, max: 120, value: 80 },
            { name: 'doorHeight', label: '–í—ã—Å–æ—Ç–∞ –¥–≤–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–µ–º–∞ (—Å–º)', type: 'number', min: 190, max: 230, value: 200 },
            { name: 'trimWidth', label: '–®–∏—Ä–∏–Ω–∞ –Ω–∞–ª–∏—á–Ω–∏–∫–∞ (–º–º)', type: 'number', min: 50, max: 100, value: 70 },
            { name: 'sides', label: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞', type: 'select', options: [
                { value: 1, text: '–° –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã' },
                { value: 2, text: '–° –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω' }
            ]}
        ],
        calculate: (inputs) => {
            const perimeterM = (inputs.doorWidth * 2 + inputs.doorHeight) / 100;
            const totalLength = perimeterM * inputs.doors * inputs.sides;
            const pieces = Math.ceil(totalLength / 2.2); // —Å—Ç–∞–Ω–¥–∞—Ä—Ç 2.2–º
            
            return `${pieces} –ø–ª–∞–Ω–æ–∫ –ø–æ 2.2–º (${totalLength.toFixed(1)} –º)`;
        }
    },

    // More Construction calculators / –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
    {
        id: 'foundation_blocks',
        title: '–ë–ª–æ–∫–∏ –§–ë–°',
        description: '–§—É–Ω–¥–∞–º–µ–Ω—Ç–Ω—ã–µ –±–ª–æ–∫–∏',
        category: 'construction',
        icon: 'üß±',
        inputs: [
            { name: 'perimeter', label: '–ü–µ—Ä–∏–º–µ—Ç—Ä —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ (–º)', type: 'number', min: 1 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ (–º)', type: 'number', min: 0.3, max: 3, step: 0.1 },
            { name: 'blockSize', label: '–†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞', type: 'select', options: [
                { value: '2400x600x600', text: '–§–ë–° 24-6-6 (2400√ó600√ó600)' },
                { value: '1200x600x600', text: '–§–ë–° 12-6-6 (1200√ó600√ó600)' },
                { value: '900x600x600', text: '–§–ë–° 9-6-6 (900√ó600√ó600)' }
            ]},
            { name: 'openings', label: '–ü—Ä–æ–µ–º—ã (–º¬≤)', type: 'number', min: 0, value: 0 }
        ],
        calculate: (inputs) => {
            const wallArea = inputs.perimeter * inputs.height - inputs.openings;
            const [length, height] = inputs.blockSize.split('x').map(n => parseInt(n) / 1000);
            const blockArea = length * height;
            const blocks = Math.ceil(wallArea / blockArea);
            
            // –í–µ—Å –±–ª–æ–∫–æ–≤
            const weights = { '2400x600x600': 1960, '1200x600x600': 960, '900x600x600': 700 };
            const totalWeight = (blocks * weights[inputs.blockSize]) / 1000;
            
            return `${blocks} –±–ª–æ–∫–æ–≤ (${totalWeight.toFixed(1)} —Ç–æ–Ω–Ω)`;
        }
    },
    {
        id: 'scaffolding',
        title: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –ª–µ—Å–∞',
        description: '–†–∞—Å—á–µ—Ç –ª–µ—Å–æ–≤ –¥–ª—è —Ñ–∞—Å–∞–¥–∞',
        category: 'construction',
        icon: 'üèóÔ∏è',
        inputs: [
            { name: 'length', label: '–î–ª–∏–Ω–∞ —Ñ–∞—Å–∞–¥–∞ (–º)', type: 'number', min: 1 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ —Ä–∞–±–æ—Ç (–º)', type: 'number', min: 2, max: 20 },
            { name: 'type', label: '–¢–∏–ø –ª–µ—Å–æ–≤', type: 'select', options: [
                { value: 'frame', text: '–†–∞–º–Ω—ã–µ' },
                { value: 'wedge', text: '–ö–ª–∏–Ω–æ–≤—ã–µ' },
                { value: 'cup', text: '–ß–∞—à–µ—á–Ω—ã–µ' }
            ]}
        ],
        calculate: (inputs) => {
            const sections = Math.ceil(inputs.length / 3); // —Å–µ–∫—Ü–∏—è 3–º
            const tiers = Math.ceil(inputs.height / 2); // —è—Ä—É—Å 2–º
            const frames = sections * tiers * 2; // 2 —Ä–∞–º—ã –Ω–∞ —è—á–µ–π–∫—É
            const decks = sections * tiers;
            const diagonals = sections * tiers;
            
            return `–°–µ–∫—Ü–∏–π: ${sections}, —è—Ä—É—Å–æ–≤: ${tiers}, —Ä–∞–º: ${frames}, –Ω–∞—Å—Ç–∏–ª–æ–≤: ${decks}`;
        }
    },
    {
        id: 'concrete_rings',
        title: '–ö–æ–ª—å—Ü–∞ –¥–ª—è –∫–æ–ª–æ–¥—Ü–∞',
        description: '–ñ/–ë –∫–æ–ª—å—Ü–∞ –¥–ª—è –∫–æ–ª–æ–¥—Ü–∞',
        category: 'construction',
        icon: '‚≠ï',
        inputs: [
            { name: 'depth', label: '–ì–ª—É–±–∏–Ω–∞ –∫–æ–ª–æ–¥—Ü–∞ (–º)', type: 'number', min: 1, max: 20 },
            { name: 'diameter', label: '–î–∏–∞–º–µ—Ç—Ä –∫–æ–ª—å—Ü–∞', type: 'select', options: [
                { value: '1.0', text: '–ö–° 10-9 (√ò1–º, –≤—ã—Å–æ—Ç–∞ 0.9–º)' },
                { value: '1.5', text: '–ö–° 15-9 (√ò1.5–º, –≤—ã—Å–æ—Ç–∞ 0.9–º)' },
                { value: '2.0', text: '–ö–° 20-9 (√ò2–º, –≤—ã—Å–æ—Ç–∞ 0.9–º)' }
            ]},
            { name: 'bottom', label: '–î–Ω–æ –∫–æ–ª–æ–¥—Ü–∞', type: 'select', options: [
                { value: 'yes', text: '–° –¥–Ω–æ–º' },
                { value: 'no', text: '–ë–µ–∑ –¥–Ω–∞' }
            ]}
        ],
        calculate: (inputs) => {
            const ringHeight = 0.9; // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞
            const rings = Math.ceil(inputs.depth / ringHeight);
            const covers = 1; // –∫—Ä—ã—à–∫–∞
            const bottoms = inputs.bottom === 'yes' ? 1 : 0;
            
            // –û–±—ä–µ–º –≥—Ä—É–Ω—Ç–∞
            const radius = parseFloat(inputs.diameter) / 2;
            const volume = Math.PI * radius * radius * inputs.depth;
            
            return `–ö–æ–ª—å—Ü–∞: ${rings} —à—Ç, –∫—Ä—ã—à–∫–∞: ${covers} —à—Ç${bottoms ? ', –¥–Ω–æ: 1 —à—Ç' : ''}, –≤—ã–µ–º–∫–∞ –≥—Ä—É–Ω—Ç–∞: ${volume.toFixed(1)} –º¬≥`;
        }
    },

    // More Electrical calculators / –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
    {
        id: 'wire_tray',
        title: '–ö–∞–±–µ–ª—å–Ω—ã–π –ª–æ—Ç–æ–∫',
        description: '–†–∞—Å—á–µ—Ç –∫–∞–±–µ–ª—å–Ω—ã—Ö –ª–æ—Ç–∫–æ–≤',
        category: 'electric',
        icon: 'üîå',
        inputs: [
            { name: 'length', label: '–î–ª–∏–Ω–∞ —Ç—Ä–∞—Å—Å—ã (–º)', type: 'number', min: 1 },
            { name: 'cables', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–±–µ–ª–µ–π', type: 'number', min: 1 },
            { name: 'cableDiameter', label: '–°—Ä–µ–¥–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä –∫–∞–±–µ–ª—è (–º–º)', type: 'number', min: 5, max: 50, value: 10 },
            { name: 'reserve', label: '–ó–∞–ø–∞—Å –º–µ—Å—Ç–∞ (%)', type: 'number', min: 20, max: 100, value: 40 }
        ],
        calculate: (inputs) => {
            const cableArea = Math.PI * Math.pow(inputs.cableDiameter / 2, 2) * inputs.cables;
            const trayArea = cableArea * (1 + inputs.reserve / 100);
            const trayWidth = Math.ceil(Math.sqrt(trayArea) / 50) * 50; // –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 50–º–º
            
            const trayPieces = Math.ceil(inputs.length / 3); // –ª–æ—Ç–∫–∏ –ø–æ 3–º
            const connectors = trayPieces - 1;
            const brackets = Math.ceil(inputs.length / 1.5); // –∫—Ä–µ–ø–µ–∂ –∫–∞–∂–¥—ã–µ 1.5–º
            
            return `–õ–æ—Ç–æ–∫ ${trayWidth}–º–º: ${trayPieces} —à—Ç –ø–æ 3–º, —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª–∏: ${connectors} —à—Ç, –∫—Ä–µ–ø–µ–∂: ${brackets} —à—Ç`;
        }
    },
    {
        id: 'grounding',
        title: '–ó–∞–∑–µ–º–ª–µ–Ω–∏–µ',
        description: '–†–∞—Å—á–µ—Ç –∫–æ–Ω—Ç—É—Ä–∞ –∑–∞–∑–µ–º–ª–µ–Ω–∏—è',
        category: 'electric',
        icon: '‚ö°',
        inputs: [
            { name: 'soilType', label: '–¢–∏–ø –≥—Ä—É–Ω—Ç–∞', type: 'select', options: [
                { value: 20, text: '–ß–µ—Ä–Ω–æ–∑–µ–º (20 –û–º¬∑–º)' },
                { value: 40, text: '–ì–ª–∏–Ω–∞ (40 –û–º¬∑–º)' },
                                { value: 100, text: '–°—É–≥–ª–∏–Ω–æ–∫ (100 –û–º¬∑–º)' },
                { value: 200, text: '–ü–µ—Å–æ–∫ –≤–ª–∞–∂–Ω—ã–π (200 –û–º¬∑–º)' },
                { value: 500, text: '–ü–µ—Å–æ–∫ —Å—É—Ö–æ–π (500 –û–º¬∑–º)' }
            ]},
            { name: 'resistance', label: '–¢—Ä–µ–±—É–µ–º–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (–û–º)', type: 'number', min: 1, max: 30, value: 4 },
            { name: 'electrodeLength', label: '–î–ª–∏–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–¥–∞ (–º)', type: 'number', min: 1.5, max: 3, value: 2.5 }
        ],
        calculate: (inputs) => {
            // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–∫—Ç—Ä–æ–¥–æ–≤
            const singleResistance = 0.366 * inputs.soilType * Math.log(2 * inputs.electrodeLength / 0.02) / inputs.electrodeLength;
            const electrodes = Math.ceil(singleResistance / inputs.resistance);
            
            // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
            const electrodeTotal = electrodes * inputs.electrodeLength;
            const wire = electrodes * 3; // —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≤–æ–¥
            
            return `–≠–ª–µ–∫—Ç—Ä–æ–¥—ã: ${electrodes} —à—Ç –ø–æ ${inputs.electrodeLength}–º, –ø—Ä–æ–≤–æ–¥: ${wire}–º, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ ~${inputs.resistance} –û–º`;
        }
    },

    // More Plumbing calculators / –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∞–Ω—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
    {
        id: 'pipe_insulation',
        title: '–£—Ç–µ–ø–ª–µ–Ω–∏–µ —Ç—Ä—É–±',
        description: '–¢–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—è –¥–ª—è —Ç—Ä—É–±',
        category: 'plumbing',
        icon: 'üîß',
        inputs: [
            { name: 'length', label: '–î–ª–∏–Ω–∞ —Ç—Ä—É–± (–º)', type: 'number', min: 0.1 },
            { name: 'diameter', label: '–î–∏–∞–º–µ—Ç—Ä —Ç—Ä—É–±—ã (–º–º)', type: 'select', options: [
                { value: 16, text: '16 –º–º' },
                { value: 20, text: '20 –º–º' },
                { value: 25, text: '25 –º–º' },
                { value: 32, text: '32 –º–º' },
                { value: 40, text: '40 –º–º' },
                { value: 50, text: '50 –º–º' }
            ]},
            { name: 'thickness', label: '–¢–æ–ª—â–∏–Ω–∞ –∏–∑–æ–ª—è—Ü–∏–∏ (–º–º)', type: 'select', options: [
                { value: 9, text: '9 –º–º' },
                { value: 13, text: '13 –º–º' },
                { value: 20, text: '20 –º–º' },
                { value: 25, text: '25 –º–º' }
            ]},
            { name: 'type', label: '–¢–∏–ø –∏–∑–æ–ª—è—Ü–∏–∏', type: 'select', options: [
                { value: 'tube', text: '–¢—Ä—É–±–∫–∏ (2–º)' },
                { value: 'roll', text: '–†—É–ª–æ–Ω' }
            ]}
        ],
        calculate: (inputs) => {
            if (inputs.type === 'tube') {
                const tubes = Math.ceil(inputs.length / 2);
                return `${tubes} —Ç—Ä—É–±–æ–∫ –ø–æ 2–º`;
            } else {
                const circumference = Math.PI * (inputs.diameter + 2 * inputs.thickness) / 1000;
                const area = inputs.length * circumference;
                return `${area.toFixed(2)} –º¬≤ —Ä—É–ª–æ–Ω–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–∏`;
            }
        }
    },
    {
        id: 'water_tank',
        title: '–†–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–∫',
        description: '–û–±—ä–µ–º —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±–∞–∫–∞',
        category: 'plumbing',
        icon: 'üíß',
        inputs: [
            { name: 'systemVolume', label: '–û–±—ä–µ–º —Å–∏—Å—Ç–µ–º—ã (–ª)', type: 'number', min: 10 },
            { name: 'systemType', label: '–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã', type: 'select', options: [
                { value: 'heating', text: '–û—Ç–æ–ø–ª–µ–Ω–∏–µ' },
                { value: 'water', text: '–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ' }
            ]},
            { name: 'maxTemp', label: '–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', type: 'number', min: 30, max: 95, value: 80 },
            { name: 'pressure', label: '–î–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ (–±–∞—Ä)', type: 'number', min: 1, max: 6, value: 3 }
        ],
        calculate: (inputs) => {
            let expansionCoef;
            if (inputs.systemType === 'heating') {
                // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–¥—ã –ø—Ä–∏ –Ω–∞–≥—Ä–µ–≤–µ
                expansionCoef = inputs.maxTemp <= 60 ? 0.02 : inputs.maxTemp <= 80 ? 0.03 : 0.04;
            } else {
                expansionCoef = 0.02; // –î–ª—è –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è
            }
            
            const efficiency = 0.5; // –ö–ü–î –±–∞–∫–∞
            const tankVolume = (inputs.systemVolume * expansionCoef) / efficiency;
            
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            const standardSizes = [8, 12, 18, 24, 35, 50, 80, 100, 150, 200];
            const recommendedSize = standardSizes.find(size => size >= tankVolume) || standardSizes[standardSizes.length - 1];
            
            return `–†–∞—Å—á–µ—Ç–Ω—ã–π –æ–±—ä–µ–º: ${tankVolume.toFixed(1)} –ª, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π: ${recommendedSize} –ª`;
        }
    },

    // More Cooking calculators / –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
    {
        id: 'yeast_converter',
        title: '–ü–µ—Ä–µ—Å—á–µ—Ç –¥—Ä–æ–∂–∂–µ–π',
        description: '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ç–∏–ø–æ–≤ –¥—Ä–æ–∂–∂–µ–π',
        category: 'cooking',
        icon: 'üçû',
        inputs: [
            { name: 'amount', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', type: 'number', min: 0.1, step: 0.1 },
            { name: 'fromType', label: '–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–∏–ø', type: 'select', options: [
                { value: 'fresh', text: '–°–≤–µ–∂–∏–µ' },
                { value: 'dry', text: '–°—É—Ö–∏–µ' },
                { value: 'instant', text: '–ë—ã—Å—Ç—Ä–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏–µ' }
            ]},
            { name: 'toType', label: '–ù—É–∂–Ω—ã–π —Ç–∏–ø', type: 'select', options: [
                { value: 'fresh', text: '–°–≤–µ–∂–∏–µ' },
                { value: 'dry', text: '–°—É—Ö–∏–µ' },
                { value: 'instant', text: '–ë—ã—Å—Ç—Ä–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏–µ' }
            ]},
            { name: 'unit', label: '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è', type: 'select', options: [
                { value: '–≥', text: '–≥—Ä–∞–º–º—ã' },
                { value: '—á.–ª.', text: '—á–∞–π–Ω—ã–µ –ª–æ–∂–∫–∏' }
            ]}
        ],
        calculate: (inputs) => {
            // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–µ—Å—á–µ—Ç–∞ (–±–∞–∑–æ–≤–∞—è –µ–¥–∏–Ω–∏—Ü–∞ - —Å–≤–µ–∂–∏–µ –¥—Ä–æ–∂–∂–∏)
            const ratios = {
                'fresh': 1,
                'dry': 0.33,
                'instant': 0.25
            };
            
            let amountInGrams = inputs.amount;
            if (inputs.unit === '—á.–ª.') {
                // 1 —á.–ª. —Å—É—Ö–∏—Ö –¥—Ä–æ–∂–∂–µ–π ‚âà 3–≥, —Å–≤–µ–∂–∏—Ö ‚âà 10–≥
                amountInGrams = inputs.fromType === 'fresh' ? inputs.amount * 10 : inputs.amount * 3;
            }
            
            const freshEquivalent = amountInGrams / ratios[inputs.fromType];
            const result = freshEquivalent * ratios[inputs.toType];
            
            let resultUnit = '–≥';
            let resultAmount = result;
            
            if (inputs.unit === '—á.–ª.' && inputs.toType !== 'fresh') {
                resultAmount = result / 3;
                resultUnit = '—á.–ª.';
            }
            
            return `${resultAmount.toFixed(1)} ${resultUnit}`;
        }
    },
    {
        id: 'sugar_syrup',
        title: '–°–∞—Ö–∞—Ä–Ω—ã–π —Å–∏—Ä–æ–ø',
        description: '–†–∞—Å—á–µ—Ç —Å–∏—Ä–æ–ø–∞ —Ä–∞–∑–Ω–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏',
        category: 'cooking',
        icon: 'üçØ',
        inputs: [
            { name: 'volume', label: '–û–±—ä–µ–º —Å–∏—Ä–æ–ø–∞ (–º–ª)', type: 'number', min: 10 },
            { name: 'concentration', label: '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è', type: 'select', options: [
                { value: 0.3, text: '–õ–µ–≥–∫–∏–π (30%)' },
                { value: 0.5, text: '–°—Ä–µ–¥–Ω–∏–π (50%)' },
                { value: 0.65, text: '–ì—É—Å—Ç–æ–π (65%)' },
                { value: 0.85, text: '–û—á–µ–Ω—å –≥—É—Å—Ç–æ–π (85%)' }
            ]},
            { name: 'purpose', label: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ', type: 'select', options: [
                { value: 'drink', text: '–î–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤' },
                { value: 'baking', text: '–î–ª—è –≤—ã–ø–µ—á–∫–∏' },
                { value: 'preserve', text: '–î–ª—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ü–∏–∏' }
            ]}
        ],
        calculate: (inputs) => {
            const sugar = inputs.volume * inputs.concentration;
            const water = inputs.volume - sugar;
            
            // –í—Ä–µ–º—è –≤–∞—Ä–∫–∏
            const cookTime = inputs.concentration <= 0.3 ? 5 : 
                           inputs.concentration <= 0.5 ? 10 : 
                           inputs.concentration <= 0.65 ? 15 : 20;
            
            return `–°–∞—Ö–∞—Ä: ${sugar.toFixed(0)} –≥, –≤–æ–¥–∞: ${water.toFixed(0)} –º–ª, –≤–∞—Ä–∏—Ç—å ${cookTime} –º–∏–Ω`;
        }
    },

    // More Garden calculators / –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∞–¥–æ–≤—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
    {
        id: 'compost',
        title: '–ö–æ–º–ø–æ—Å—Ç–Ω–∞—è –∫—É—á–∞',
        description: '–†–∞—Å—á–µ—Ç –∫–æ–º–ø–æ—Å—Ç–µ—Ä–∞',
        category: 'garden',
        icon: '‚ôªÔ∏è',
        inputs: [
            { name: 'people', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫', type: 'number', min: 1, max: 10 },
            { name: 'gardenArea', label: '–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ (—Å–æ—Ç–æ–∫)', type: 'number', min: 1, max: 50 },
            { name: 'type', label: '–¢–∏–ø –∫–æ–º–ø–æ—Å—Ç–µ—Ä–∞', type: 'select', options: [
                { value: 'box', text: '–Ø—â–∏–∫' },
                { value: 'barrel', text: '–ë–æ—á–∫–∞' },
                { value: 'pile', text: '–ö—É—á–∞' }
            ]}
        ],
        calculate: (inputs) => {
            // ~200–ª –æ—Ç—Ö–æ–¥–æ–≤ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –≥–æ–¥ + 50–ª –Ω–∞ —Å–æ—Ç–∫—É
            const yearlyVolume = inputs.people * 200 + inputs.gardenArea * 50;
            const composterVolume = yearlyVolume / 2; // –ö–æ–º–ø–æ—Å—Ç —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –≤ 2 —Ä–∞–∑–∞
            
            let result = `–û–±—ä–µ–º –∫–æ–º–ø–æ—Å—Ç–µ—Ä–∞: ${composterVolume.toFixed(0)} –ª`;
            
            if (inputs.type === 'box') {
                const side = Math.cbrt(composterVolume / 1000);
                result += `, —Ä–∞–∑–º–µ—Ä ~${side.toFixed(1)}√ó${side.toFixed(1)}√ó${side.toFixed(1)} –º`;
            } else if (inputs.type === 'barrel') {
                const barrels = Math.ceil(composterVolume / 200);
                result += `, ${barrels} –±–æ—á–µ–∫ –ø–æ 200–ª`;
            }
            
            return result;
        }
    },
    {
        id: 'mulch',
        title: '–ú—É–ª—å—á–∞',
        description: '–†–∞—Å—á–µ—Ç –º—É–ª—å—á–∏ –¥–ª—è –≥—Ä—è–¥–æ–∫',
        category: 'garden',
        icon: 'üåø',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –º—É–ª—å—á–∏—Ä–æ–≤–∞–Ω–∏—è (–º¬≤)', type: 'number', min: 0.1 },
            { name: 'thickness', label: '–¢–æ–ª—â–∏–Ω–∞ —Å–ª–æ—è (—Å–º)', type: 'number', min: 2, max: 15, value: 5 },
            { name: 'material', label: '–ú–∞—Ç–µ—Ä–∏–∞–ª', type: 'select', options: [
                { value: 'bark', text: '–ö–æ—Ä–∞' },
                { value: 'chips', text: '–©–µ–ø–∞' },
                { value: 'straw', text: '–°–æ–ª–æ–º–∞' },
                { value: 'gravel', text: '–ì—Ä–∞–≤–∏–π' }
            ]}
        ],
        calculate: (inputs) => {
            const volumeM3 = inputs.area * (inputs.thickness / 100);
            const volumeL = volumeM3 * 1000;
            
            let packaging = '';
            if (inputs.material === 'bark' || inputs.material === 'chips') {
                const bags = Math.ceil(volumeL / 50);
                packaging = `, ${bags} –º–µ—à–∫–æ–≤ –ø–æ 50–ª`;
            } else if (inputs.material === 'straw') {
                const bales = Math.ceil(inputs.area / 10); // 1 —Ç—é–∫ –Ω–∞ 10–º¬≤
                packaging = `, ${bales} —Ç—é–∫–æ–≤`;
            } else if (inputs.material === 'gravel') {
                const tons = volumeM3 * 1.5; // –ø–ª–æ—Ç–Ω–æ—Å—Ç—å ~1.5 —Ç/–º¬≥
                packaging = `, ${tons.toFixed(1)} —Ç–æ–Ω–Ω`;
            }
            
            return `${volumeM3.toFixed(2)} –º¬≥ (${volumeL.toFixed(0)} –ª)${packaging}`;
        }
    },
    // More Auto calculators / –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
    {
        id: 'tire_pressure',
        title: '–î–∞–≤–ª–µ–Ω–∏–µ –≤ —à–∏–Ω–∞—Ö',
        description: '–†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è',
        category: 'auto',
        icon: 'üõû',
        inputs: [
            { name: 'tireSize', label: '–†–∞–∑–º–µ—Ä —à–∏–Ω', type: 'select', options: [
                { value: '175/70R13', text: '175/70 R13' },
                { value: '185/65R14', text: '185/65 R14' },
                { value: '195/65R15', text: '195/65 R15' },
                { value: '205/55R16', text: '205/55 R16' },
                { value: '215/55R17', text: '215/55 R17' },
                { value: '225/45R18', text: '225/45 R18' }
            ]},
            { name: 'load', label: '–ó–∞–≥—Ä—É–∑–∫–∞', type: 'select', options: [
                                { value: 0.9, text: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è (1-2 —á–µ–ª–æ–≤–µ–∫–∞)' },
                { value: 1, text: '–°—Ä–µ–¥–Ω—è—è (3-4 —á–µ–ª–æ–≤–µ–∫–∞)' },
                { value: 1.1, text: '–ü–æ–ª–Ω–∞—è (5 —á–µ–ª–æ–≤–µ–∫ + –±–∞–≥–∞–∂)' }
            ]},
            { name: 'season', label: '–°–µ–∑–æ–Ω', type: 'select', options: [
                { value: 'summer', text: '–õ–µ—Ç–æ' },
                { value: 'winter', text: '–ó–∏–º–∞' }
            ]}
        ],
        calculate: (inputs) => {
            // –ë–∞–∑–æ–≤–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ —à–∏–Ω
            const basePressure = {
                '175/70R13': 2.0,
                '185/65R14': 2.1,
                '195/65R15': 2.2,
                '205/55R16': 2.3,
                '215/55R17': 2.4,
                '225/45R18': 2.5
            };
            
            let pressure = basePressure[inputs.tireSize] * inputs.load;
            
            // –ó–∏–º–æ–π –¥–∞–≤–ª–µ–Ω–∏–µ —á—É—Ç—å –≤—ã—à–µ
            if (inputs.season === 'winter') {
                pressure += 0.1;
            }
            
            const front = pressure;
            const rear = pressure - 0.1; // –ó–∞–¥–Ω–∏–µ —á—É—Ç—å –º–µ–Ω—å—à–µ
            
            return `–ü–µ—Ä–µ–¥–Ω–∏–µ: ${front.toFixed(1)} –∞—Ç–º, –ó–∞–¥–Ω–∏–µ: ${rear.toFixed(1)} –∞—Ç–º`;
        }
    },
    {
        id: 'brake_fluid',
        title: '–¢–æ—Ä–º–æ–∑–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å',
        description: '–†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ —Ç–æ—Ä–º–æ–∑–Ω–æ–π –∂–∏–¥–∫–æ—Å—Ç–∏',
        category: 'auto',
        icon: 'üõë',
        inputs: [
            { name: 'carType', label: '–¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è', type: 'select', options: [
                { value: 0.5, text: '–ú–∞–ª–æ–ª–∏—Ç—Ä–∞–∂–∫–∞' },
                { value: 0.7, text: '–°–µ–¥–∞–Ω' },
                { value: 0.9, text: '–ö—Ä–æ—Å—Å–æ–≤–µ—Ä' },
                { value: 1.2, text: '–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫' }
            ]},
            { name: 'abs', label: '–ù–∞–ª–∏—á–∏–µ ABS', type: 'select', options: [
                { value: 1, text: '–ë–µ–∑ ABS' },
                { value: 1.3, text: '–° ABS' }
            ]},
            { name: 'flush', label: '–¢–∏–ø –∑–∞–º–µ–Ω—ã', type: 'select', options: [
                { value: 1, text: '–ß–∞—Å—Ç–∏—á–Ω–∞—è' },
                { value: 2, text: '–ü–æ–ª–Ω–∞—è –ø—Ä–æ–º—ã–≤–∫–∞' }
            ]}
        ],
        calculate: (inputs) => {
            const volume = inputs.carType * inputs.abs * inputs.flush;
            const bottles = Math.ceil(volume / 0.5); // –ë—É—Ç—ã–ª–∫–∏ –ø–æ 0.5–ª
            
            return `${volume.toFixed(1)} –ª (${bottles} –±—É—Ç—ã–ª–æ–∫ –ø–æ 0.5–ª)`;
        }
    },

    // More Other calculators / –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—á–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
    {
        id: 'pool_volume',
        title: '–û–±—ä–µ–º –±–∞—Å—Å–µ–π–Ω–∞',
        description: '–†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –≤–æ–¥—ã –≤ –±–∞—Å—Å–µ–π–Ω–µ',
        category: 'other',
        icon: 'üèä',
        inputs: [
            { name: 'shape', label: '–§–æ—Ä–º–∞ –±–∞—Å—Å–µ–π–Ω–∞', type: 'select', options: [
                { value: 'rect', text: '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π' },
                { value: 'round', text: '–ö—Ä—É–≥–ª—ã–π' },
                { value: 'oval', text: '–û–≤–∞–ª—å–Ω—ã–π' }
            ]},
            { name: 'length', label: '–î–ª–∏–Ω–∞ (–º)', type: 'number', min: 1, step: 0.1 },
            { name: 'width', label: '–®–∏—Ä–∏–Ω–∞ (–º)', type: 'number', min: 1, step: 0.1, 
              condition: (inputs) => inputs.shape !== 'round' },
            { name: 'depth', label: '–ì–ª—É–±–∏–Ω–∞ (–º)', type: 'number', min: 0.5, max: 3, step: 0.1 },
            { name: 'fillLevel', label: '–£—Ä–æ–≤–µ–Ω—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (%)', type: 'number', min: 50, max: 100, value: 90 }
        ],
        calculate: (inputs) => {
            let volume;
            
            if (inputs.shape === 'rect') {
                volume = inputs.length * inputs.width * inputs.depth;
            } else if (inputs.shape === 'round') {
                volume = Math.PI * Math.pow(inputs.length / 2, 2) * inputs.depth;
            } else { // oval
                volume = Math.PI * (inputs.length / 2) * (inputs.width / 2) * inputs.depth;
            }
            
            volume *= inputs.fillLevel / 100;
            const liters = volume * 1000;
            const fillTime = liters / 600; // –ü—Ä–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ 10 –ª/–º–∏–Ω
            
            return `${volume.toFixed(1)} –º¬≥ (${liters.toFixed(0)} –ª), –≤—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è ~${fillTime.toFixed(0)} —á–∞—Å–æ–≤`;
        }
    },
    {
        id: 'pool_chemicals',
        title: '–•–∏–º–∏—è –¥–ª—è –±–∞—Å—Å–µ–π–Ω–∞',
        description: '–†–∞—Å—á–µ—Ç —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∞–≥–µ–Ω—Ç–æ–≤',
        category: 'other',
        icon: 'üß™',
        inputs: [
            { name: 'volume', label: '–û–±—ä–µ–º –±–∞—Å—Å–µ–π–Ω–∞ (–º¬≥)', type: 'number', min: 1 },
            { name: 'treatment', label: '–¢–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏', type: 'select', options: [
                { value: 'shock', text: '–®–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞' },
                { value: 'regular', text: '–†–µ–≥—É–ª—è—Ä–Ω–∞—è' },
                { value: 'algae', text: '–û—Ç –≤–æ–¥–æ—Ä–æ—Å–ª–µ–π' }
            ]},
            { name: 'chemical', label: '–ü—Ä–µ–ø–∞—Ä–∞—Ç', type: 'select', options: [
                { value: 'chlorine', text: '–•–ª–æ—Ä' },
                { value: 'oxygen', text: '–ê–∫—Ç–∏–≤–Ω—ã–π –∫–∏—Å–ª–æ—Ä–æ–¥' },
                { value: 'bromine', text: '–ë—Ä–æ–º' }
            ]}
        ],
        calculate: (inputs) => {
            const dosage = {
                shock: { chlorine: 15, oxygen: 20, bromine: 20 },
                regular: { chlorine: 3, oxygen: 5, bromine: 5 },
                algae: { chlorine: 10, oxygen: 15, bromine: 15 }
            };
            
            const amount = inputs.volume * dosage[inputs.treatment][inputs.chemical];
            const ph_minus = inputs.volume * 1.5; // pH –º–∏–Ω—É—Å
            const ph_plus = inputs.volume * 1; // pH –ø–ª—é—Å
            
            return `${inputs.chemical === 'chlorine' ? '–•–ª–æ—Ä' : inputs.chemical === 'oxygen' ? '–ö–∏—Å–ª–æ—Ä–æ–¥' : '–ë—Ä–æ–º'}: ${amount} –≥, pH-: ${ph_minus} –≥, pH+: ${ph_plus} –≥`;
        }
    },
    {
        id: 'firewood',
        title: '–î—Ä–æ–≤–∞ –¥–ª—è –æ—Ç–æ–ø–ª–µ–Ω–∏—è',
        description: '–†–∞—Å—á–µ—Ç –¥—Ä–æ–≤ –Ω–∞ —Å–µ–∑–æ–Ω',
        category: 'other',
        icon: 'ü™µ',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –¥–æ–º–∞ (–º¬≤)', type: 'number', min: 10 },
            { name: 'insulation', label: '–£—Ç–µ–ø–ª–µ–Ω–∏–µ', type: 'select', options: [
                { value: 1.5, text: '–ü–ª–æ—Ö–æ–µ' },
                { value: 1, text: '–°—Ä–µ–¥–Ω–µ–µ' },
                { value: 0.7, text: '–•–æ—Ä–æ—à–µ–µ' }
            ]},
            { name: 'woodType', label: '–ü–æ—Ä–æ–¥–∞ –¥–µ—Ä–µ–≤–∞', type: 'select', options: [
                { value: 1, text: '–î—É–±, –±—É–∫' },
                { value: 1.2, text: '–ë–µ—Ä–µ–∑–∞' },
                { value: 1.4, text: '–°–æ—Å–Ω–∞, –µ–ª—å' },
                { value: 1.6, text: '–û—Å–∏–Ω–∞, —Ç–æ–ø–æ–ª—å' }
            ]},
            { name: 'season', label: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∑–æ–Ω–∞ (–º–µ—Å—è—Ü–µ–≤)', type: 'number', min: 3, max: 8, value: 6 }
        ],
        calculate: (inputs) => {
            // –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥: 0.1 –º¬≥ –Ω–∞ 1 –º¬≤ –≤ –º–µ—Å—è—Ü
            const volume = inputs.area * 0.1 * inputs.season * inputs.insulation * inputs.woodType;
            const weight = volume * 650; // –°—Ä–µ–¥–Ω—è—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –¥—Ä–æ–≤ 650 –∫–≥/–º¬≥
            
            return `${volume.toFixed(1)} –º¬≥ (${(weight / 1000).toFixed(1)} —Ç–æ–Ω–Ω)`;
        }
    },
    {
        id: 'pellets',
        title: '–ü–µ–ª–ª–µ—Ç—ã –¥–ª—è –∫–æ—Ç–ª–∞',
        description: '–†–∞—Å—Ö–æ–¥ –ø–µ–ª–ª–µ—Ç –Ω–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ',
        category: 'other',
        icon: 'üî•',
        inputs: [
            { name: 'power', label: '–ú–æ—â–Ω–æ—Å—Ç—å –∫–æ—Ç–ª–∞ (–∫–í—Ç)', type: 'number', min: 5, max: 50 },
            { name: 'hours', label: '–ß–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –≤ —Å—É—Ç–∫–∏', type: 'number', min: 1, max: 24, value: 12 },
            { name: 'days', label: '–î–Ω–µ–π –≤ —Å–µ–∑–æ–Ω–µ', type: 'number', min: 30, max: 240, value: 180 },
            { name: 'efficiency', label: '–ö–ü–î –∫–æ—Ç–ª–∞ (%)', type: 'number', min: 70, max: 95, value: 85 }
        ],
        calculate: (inputs) => {
            // –†–∞—Å—Ö–æ–¥ –ø–µ–ª–ª–µ—Ç: 0.2 –∫–≥ –Ω–∞ 1 –∫–í—Ç¬∑—á
            const dailyConsumption = inputs.power * inputs.hours * 0.2 / (inputs.efficiency / 100);
            const seasonConsumption = dailyConsumption * inputs.days;
            const bags = Math.ceil(seasonConsumption / 15); // –ú–µ—à–∫–∏ –ø–æ 15 –∫–≥
            const tons = seasonConsumption / 1000;
            
            return `${seasonConsumption.toFixed(0)} –∫–≥ (${tons.toFixed(1)} —Ç), ${bags} –º–µ—à–∫–æ–≤ –ø–æ 15 –∫–≥`;
        }
    },
    {
        id: 'air_conditioner',
        title: '–ú–æ—â–Ω–æ—Å—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞',
        description: '–ü–æ–¥–±–æ—Ä –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞ –ø–æ –ø–ª–æ—â–∞–¥–∏',
        category: 'other',
        icon: '‚ùÑÔ∏è',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è (–º¬≤)', type: 'number', min: 5, max: 100 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ (–º)', type: 'number', min: 2.4, max: 4, step: 0.1, value: 2.7 },
            { name: 'windows', label: '–û–∫–Ω–∞', type: 'select', options: [
                { value: 1, text: '–°–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞' },
                { value: 1.2, text: '–í–æ—Å—Ç–æ–∫/–ó–∞–ø–∞–¥' },
                { value: 1.4, text: '–Æ–∂–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞' }
            ]},
            { name: 'people', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π', type: 'number', min: 1, max: 10, value: 2 },
            { name: 'equipment', label: '–¢–µ—Ö–Ω–∏–∫–∞ (–∫–æ–º–ø—å—é—Ç–µ—Ä—ã, –¢–í)', type: 'number', min: 0, max: 10, value: 1 }
        ],
        calculate: (inputs) => {
            // –ë–∞–∑–æ–≤–∞—è –º–æ—â–Ω–æ—Å—Ç—å: 100 –í—Ç/–º¬≤ –ø—Ä–∏ –≤—ã—Å–æ—Ç–µ 2.7–º
            const basePower = inputs.area * 100 * (inputs.height / 2.7) * inputs.windows;
            const peoplePower = inputs.people * 150; // 150 –í—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞
            const equipmentPower = inputs.equipment * 300; // 300 –í—Ç –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            
            const totalWatts = basePower + peoplePower + equipmentPower;
            const totalBTU = totalWatts * 3.412;
            
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            const sizes = [7000, 9000, 12000, 18000, 24000];
            const recommended = sizes.find(size => size >= totalBTU) || sizes[sizes.length - 1];
            
            return `${(totalWatts / 1000).toFixed(1)} –∫–í—Ç (${Math.round(totalBTU)} BTU), —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ${recommended} BTU`;
        }
    },
    {
        id: 'ventilation_rate',
        title: '–†–∞—Å—á–µ—Ç –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏',
        description: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏',
        category: 'other',
        icon: 'üí®',
        inputs: [
            { name: 'roomType', label: '–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è', type: 'select', options: [
                { value: 3, text: '–ñ–∏–ª–∞—è –∫–æ–º–Ω–∞—Ç–∞' },
                { value: 8, text: '–ö—É—Ö–Ω—è' },
                { value: 10, text: '–í–∞–Ω–Ω–∞—è' },
                { value: 5, text: '–¢—É–∞–ª–µ—Ç' },
                { value: 2, text: '–ö–ª–∞–¥–æ–≤–∞—è' }
            ]},
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å (–º¬≤)', type: 'number', min: 1 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ (–º)', type: 'number', min: 2, max: 4, step: 0.1, value: 2.7 }
        ],
        calculate: (inputs) => {
            const volume = inputs.area * inputs.height;
            const airExchange = volume * inputs.roomType;
            
            // –ü–æ–¥–±–æ—Ä –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞
            const fanPower = Math.ceil(airExchange / 50) * 50; // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 50
            
            return `${airExchange.toFixed(0)} –º¬≥/—á–∞—Å (–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –æ—Ç ${fanPower} –º¬≥/—á–∞—Å)`;
        }
    },
    {
        id: 'solar_panels',
        title: '–°–æ–ª–Ω–µ—á–Ω—ã–µ –ø–∞–Ω–µ–ª–∏',
        description: '–†–∞—Å—á–µ—Ç —Å–æ–ª–Ω–µ—á–Ω–æ–π —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏',
        category: 'other',
        icon: '‚òÄÔ∏è',
        inputs: [
            { name: 'consumption', label: '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á/–º–µ—Å—è—Ü)', type: 'number', min: 50 },
            { name: 'region', label: '–†–µ–≥–∏–æ–Ω', type: 'select', options: [
                                { value: 3, text: '–°–µ–≤–µ—Ä–Ω—ã–π (3 —á–∞—Å–∞)' },
                { value: 4, text: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π (4 —á–∞—Å–∞)' },
                { value: 5, text: '–Æ–∂–Ω—ã–π (5 —á–∞—Å–æ–≤)' }
            ]},
            { name: 'panelPower', label: '–ú–æ—â–Ω–æ—Å—Ç—å –ø–∞–Ω–µ–ª–∏ (–í—Ç)', type: 'number', min: 100, max: 500, value: 300 },
            { name: 'efficiency', label: '–ö–ü–î —Å–∏—Å—Ç–µ–º—ã (%)', type: 'number', min: 70, max: 90, value: 80 }
        ],
        calculate: (inputs) => {
            const dailyConsumption = inputs.consumption / 30;
            const requiredPower = dailyConsumption / inputs.region / (inputs.efficiency / 100);
            const panels = Math.ceil((requiredPower * 1000) / inputs.panelPower);
            const totalPower = panels * inputs.panelPower;
            
            // –ü–ª–æ—â–∞–¥—å –ø–∞–Ω–µ–ª–µ–π (–ø—Ä–∏–º–µ—Ä–Ω–æ 2–º¬≤ –Ω–∞ 300–í—Ç)
            const area = panels * (inputs.panelPower / 150);
            
            // –ë–∞—Ç–∞—Ä–µ–∏ (12–í 200–ê—á –Ω–∞ –∫–∞–∂–¥—ã–µ 2.4 –∫–í—Ç¬∑—á)
            const batteries = Math.ceil(dailyConsumption / 2.4);
            
            return `–ü–∞–Ω–µ–ª–∏: ${panels} —à—Ç (${totalPower} –í—Ç), –ø–ª–æ—â–∞–¥—å ${area.toFixed(1)} –º¬≤, –±–∞—Ç–∞—Ä–µ–∏: ${batteries} —à—Ç`;
        }
    },
    {
        id: 'generator_power',
        title: '–ú–æ—â–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞',
        description: '–ü–æ–¥–±–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ–º–∞',
        category: 'other',
        icon: '‚ö°',
        inputs: [
            { name: 'devices', label: '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã', type: 'select', options: [
                { value: 3, text: '–ú–∏–Ω–∏–º—É–º (—Å–≤–µ—Ç, —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫)' },
                { value: 5, text: '–°—Ä–µ–¥–Ω–∏–π (+ –¢–í, –∫–æ–º–ø—å—é—Ç–µ—Ä)' },
                { value: 8, text: '–ö–æ–º—Ñ–æ—Ä—Ç (+ —Å—Ç–∏—Ä–∞–ª–∫–∞, –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞)' },
                { value: 12, text: '–ü–æ–ª–Ω—ã–π (+ —ç–ª–µ–∫—Ç—Ä–æ–ø–ª–∏—Ç–∞, –±–æ–π–ª–µ—Ä)' }
            ]},
            { name: 'startingPower', label: '–ü—É—Å–∫–æ–≤—ã–µ —Ç–æ–∫–∏', type: 'select', options: [
                { value: 1.5, text: '–£—á–µ—Å—Ç—å (√ó1.5)' },
                { value: 1, text: '–ù–µ —É—á–∏—Ç—ã–≤–∞—Ç—å' }
            ]},
            { name: 'reserve', label: '–ó–∞–ø–∞—Å –º–æ—â–Ω–æ—Å—Ç–∏ (%)', type: 'number', min: 10, max: 50, value: 20 }
        ],
        calculate: (inputs) => {
            const basePower = inputs.devices * inputs.startingPower;
            const totalPower = basePower * (1 + inputs.reserve / 100);
            
            // –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ 0.3 –ª/–∫–í—Ç¬∑—á)
            const fuelConsumption = totalPower * 0.3;
            
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ—â–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
            const sizes = [2, 3, 5, 6.5, 8, 10, 15, 20];
            const recommended = sizes.find(size => size >= totalPower) || sizes[sizes.length - 1];
            
            return `–†–∞—Å—á–µ—Ç–Ω–∞—è: ${totalPower.toFixed(1)} –∫–í—Ç, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: ${recommended} –∫–í—Ç (—Ä–∞—Å—Ö–æ–¥ ~${fuelConsumption.toFixed(1)} –ª/—á–∞—Å)`;
        }
    },
    {
        id: 'water_heater',
        title: '–û–±—ä–µ–º –±–æ–π–ª–µ—Ä–∞',
        description: '–ü–æ–¥–±–æ—Ä –≤–æ–¥–æ–Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—è',
        category: 'other',
        icon: 'üöø',
        inputs: [
            { name: 'people', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫', type: 'number', min: 1, max: 10 },
            { name: 'usage', label: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ', type: 'select', options: [
                { value: 30, text: '–≠–∫–æ–Ω–æ–º–Ω–æ–µ (30 –ª/—á–µ–ª)' },
                { value: 50, text: '–°—Ä–µ–¥–Ω–µ–µ (50 –ª/—á–µ–ª)' },
                { value: 80, text: '–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ (80 –ª/—á–µ–ª)' }
            ]},
            { name: 'simultaneous', label: '–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ', type: 'select', options: [
                { value: 0.6, text: '–†–µ–¥–∫–æ (√ó0.6)' },
                { value: 0.8, text: '–ò–Ω–æ–≥–¥–∞ (√ó0.8)' },
                { value: 1, text: '–ß–∞—Å—Ç–æ (√ó1.0)' }
            ]}
        ],
        calculate: (inputs) => {
            const volume = inputs.people * inputs.usage * inputs.simultaneous;
            
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—ä–µ–º—ã –±–æ–π–ª–µ—Ä–æ–≤
            const sizes = [30, 50, 80, 100, 150, 200, 300];
            const recommended = sizes.find(size => size >= volume) || sizes[sizes.length - 1];
            
            // –í—Ä–µ–º—è –Ω–∞–≥—Ä–µ–≤–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
            const heatingTime = recommended * 0.04; // —á–∞—Å–æ–≤ –ø—Ä–∏ 2–∫–í—Ç
            
            // –†–∞—Å—Ö–æ–¥ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ –º–µ—Å—è—Ü
            const monthlyKWh = recommended * 0.05 * 30; // –ø—Ä–∏–º–µ—Ä–Ω–æ
            
            return `–†–∞—Å—á–µ—Ç–Ω—ã–π: ${volume.toFixed(0)} –ª, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: ${recommended} –ª (–Ω–∞–≥—Ä–µ–≤ ~${heatingTime.toFixed(1)} —á, ~${monthlyKWh.toFixed(0)} –∫–í—Ç¬∑—á/–º–µ—Å)`;
        }
    },
    {
        id: 'internet_cable',
        title: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∫–∞–±–µ–ª—å',
        description: '–†–∞—Å—á–µ—Ç —Å–µ—Ç–µ–≤–æ–≥–æ –∫–∞–±–µ–ª—è',
        category: 'other',
        icon: 'üåê',
        inputs: [
            { name: 'points', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫', type: 'number', min: 1 },
            { name: 'avgDistance', label: '–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –¥–æ —Ç–æ—á–∫–∏ (–º)', type: 'number', min: 1 },
            { name: 'cableType', label: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞–±–µ–ª—è', type: 'select', options: [
                { value: 'cat5e', text: 'Cat5e (–¥–æ 1 –ì–±–∏—Ç/—Å)' },
                { value: 'cat6', text: 'Cat6 (–¥–æ 10 –ì–±–∏—Ç/—Å)' },
                { value: 'cat6a', text: 'Cat6a (–¥–æ 10 –ì–±–∏—Ç/—Å, 100–º)' },
                { value: 'cat7', text: 'Cat7 (–¥–æ 10 –ì–±–∏—Ç/—Å, —ç–∫—Ä–∞–Ω)' }
            ]},
            { name: 'reserve', label: '–ó–∞–ø–∞—Å (%)', type: 'number', min: 10, max: 50, value: 20 }
        ],
        calculate: (inputs) => {
            const totalLength = inputs.points * inputs.avgDistance * (1 + inputs.reserve / 100);
            const boxes = Math.ceil(totalLength / 305); // –ë—É—Ö—Ç–∞ 305–º
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            const connectors = inputs.points * 2; // –ü–æ 2 –Ω–∞ —Ç–æ—á–∫—É
            const sockets = inputs.points;
            
            return `–ö–∞–±–µ–ª—å ${inputs.cableType}: ${totalLength.toFixed(0)} –º (${boxes} –±—É—Ö—Ç), –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã RJ45: ${connectors} —à—Ç, —Ä–æ–∑–µ—Ç–∫–∏: ${sockets} —à—Ç`;
        }
    },
    {
        id: 'security_cameras',
        title: '–í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ',
        description: '–†–∞—Å—á–µ—Ç —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è',
        category: 'other',
        icon: 'üìπ',
        inputs: [
            { name: 'cameras', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–µ—Ä', type: 'number', min: 1, max: 32 },
            { name: 'resolution', label: '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ', type: 'select', options: [
                { value: 1, text: '720p (1 –ú–ø)' },
                { value: 2, text: '1080p (2 –ú–ø)' },
                { value: 4, text: '2K (4 –ú–ø)' },
                { value: 8, text: '4K (8 –ú–ø)' }
            ]},
            { name: 'days', label: '–î–Ω–µ–π –∑–∞–ø–∏—Å–∏', type: 'number', min: 7, max: 90, value: 30 },
            { name: 'fps', label: '–ö–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É', type: 'select', options: [
                { value: 15, text: '15 fps' },
                { value: 25, text: '25 fps' },
                { value: 30, text: '30 fps' }
            ]}
        ],
        calculate: (inputs) => {
            // –ë–∏—Ç—Ä–µ–π—Ç –≤ –ú–±–∏—Ç/—Å –¥–ª—è H.264
            const bitrates = { 1: 2, 2: 4, 4: 8, 8: 16 };
            const bitrate = bitrates[inputs.resolution];
            
            // –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            const gbPerDay = (bitrate * inputs.fps / 25 * inputs.cameras * 86400) / 8 / 1024;
            const totalGB = gbPerDay * inputs.days;
            const totalTB = totalGB / 1024;
            
            // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π HDD
            const hddSizes = [1, 2, 4, 6, 8, 10, 12];
            const recommendedHDD = hddSizes.find(size => size >= totalTB) || hddSizes[hddSizes.length - 1];
            
            return `–¢—Ä–µ–±—É–µ—Ç—Å—è: ${totalTB.toFixed(1)} –¢–ë, HDD: ${recommendedHDD} –¢–ë (${gbPerDay.toFixed(1)} –ì–ë/–¥–µ–Ω—å)`;
        }
    },
    {
        id: 'sound_insulation',
        title: '–ó–≤—É–∫–æ–∏–∑–æ–ª—è—Ü–∏—è',
        description: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —à—É–º–æ–∏–∑–æ–ª—è—Ü–∏–∏',
        category: 'other',
        icon: 'üîá',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (–º¬≤)', type: 'number', min: 1 },
            { name: 'type', label: '–¢–∏–ø —à—É–º–æ–∏–∑–æ–ª—è—Ü–∏–∏', type: 'select', options: [
                { value: 'basic', text: '–ë–∞–∑–æ–≤–∞—è (‚àí20 –¥–ë)' },
                { value: 'standard', text: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è (‚àí30 –¥–ë)' },
                { value: 'premium', text: '–ü—Ä–µ–º–∏—É–º (‚àí40 –¥–ë)' },
                { value: 'studio', text: '–°—Ç—É–¥–∏–π–Ω–∞—è (‚àí50 –¥–ë)' }
            ]},
            { name: 'surface', label: '–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å', type: 'select', options: [
                { value: 'wall', text: '–°—Ç–µ–Ω—ã' },
                { value: 'ceiling', text: '–ü–æ—Ç–æ–ª–æ–∫' },
                { value: 'floor', text: '–ü–æ–ª' }
            ]}
        ],
        calculate: (inputs) => {
            const materials = {
                basic: { thickness: 50, layers: 1, density: 30 },
                standard: { thickness: 100, layers: 2, density: 50 },
                premium: { thickness: 150, layers: 3, density: 80 },
                studio: { thickness: 200, layers: 4, density: 100 }
            };
            
            const mat = materials[inputs.type];
            const volume = inputs.area * (mat.thickness / 1000);
            const weight = volume * mat.density;
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            const membrane = inputs.type !== 'basic' ? inputs.area : 0;
            const profile = inputs.area * 3; // –ü—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–µ 0.6–º
            
            return `–ò–∑–æ–ª—è—Ü–∏—è: ${volume.toFixed(1)} –º¬≥ (${weight.toFixed(0)} –∫–≥), ${mat.layers} —Å–ª–æ–µ–≤${membrane > 0 ? `, –º–µ–º–±—Ä–∞–Ω–∞: ${membrane.toFixed(0)} –º¬≤` : ''}, –ø—Ä–æ—Ñ–∏–ª—å: ${profile.toFixed(0)} –º`;
        }
    },
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–ª—è electric
    {
        id: 'smart_home',
        title: '–£–º–Ω—ã–π –¥–æ–º',
        description: '–†–∞—Å—á–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —É–º–Ω–æ–≥–æ –¥–æ–º–∞',
        category: 'electric',
        icon: 'üè†',
        inputs: [
            { name: 'rooms', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç', type: 'number', min: 1, max: 20 },
            { name: 'level', label: '–£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏', type: 'select', options: [
                { value: 'basic', text: '–ë–∞–∑–æ–≤—ã–π (—Å–≤–µ—Ç, —Ä–æ–∑–µ—Ç–∫–∏)' },
                { value: 'comfort', text: '–ö–æ–º—Ñ–æ—Ä—Ç (+ –∫–ª–∏–º–∞—Ç, —à—Ç–æ—Ä—ã)' },
                { value: 'premium', text: '–ü—Ä–µ–º–∏—É–º (+ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞)' }
            ]},
            { name: 'control', label: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', type: 'select', options: [
                { value: 'app', text: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' },
                { value: 'voice', text: '–ì–æ–ª–æ—Å + –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' },
                { value: 'full', text: '–ü–æ–ª–Ω–æ–µ (+ —Å—Ü–µ–Ω–∞—Ä–∏–∏)' }
            ]}
        ],
        calculate: (inputs) => {
            const devices = {
                basic: { switches: 2, sensors: 1, hub: 1 },
                comfort: { switches: 3, sensors: 2, hub: 1, climate: 1 },
                premium: { switches: 4, sensors: 4, hub: 2, climate: 1, cameras: 2 }
            };
            
            const dev = devices[inputs.level];
            const totalSwitches = dev.switches * inputs.rooms;
            const totalSensors = dev.sensors * inputs.rooms;
            
            return `–í—ã–∫–ª—é—á–∞—Ç–µ–ª–∏: ${totalSwitches}, –¥–∞—Ç—á–∏–∫–∏: ${totalSensors}, —Ö–∞–±—ã: ${dev.hub}, –∫–ª–∏–º–∞—Ç: ${dev.climate || 0}${dev.cameras ? `, –∫–∞–º–µ—Ä—ã: ${dev.cameras}` : ''}`;
        }
    },

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–ª—è plumbing
    {
        id: 'water_filter',
        title: '–°–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏',
        description: '–†–∞—Å—á–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –≤–æ–¥—ã',
        category: 'plumbing',
        icon: 'üíß',
        inputs: [
            { name: 'people', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫', type: 'number', min: 1, max: 10 },
            { name: 'waterQuality', label: '–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã', type: 'select', options: [
                { value: 'good', text: '–•–æ—Ä–æ—à–µ–µ (–≥–æ—Ä–æ–¥—Å–∫–∞—è)' },
                { value: 'medium', text: '–°—Ä–µ–¥–Ω–µ–µ (—Å–∫–≤–∞–∂–∏–Ω–∞)' },
                { value: 'poor', text: '–ü–ª–æ—Ö–æ–µ (—Ç—Ä–µ–±—É–µ—Ç –æ—á–∏—Å—Ç–∫–∏)' }
            ]},
            { name: 'usage', label: '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã (–ª/—á–µ–ª/–¥–µ–Ω—å)', type: 'number', min: 50, max: 300, value: 150 }
        ],
        calculate: (inputs) => {
            const dailyUsage = inputs.people * inputs.usage;
            const yearlyUsage = dailyUsage * 365;
            
            const filterCapacity = {
                good: 10000,
                medium: 6000,
                poor: 3000
            };
            
            const cartridges = Math.ceil(yearlyUsage / filterCapacity[inputs.waterQuality]);
            const stages = inputs.waterQuality === 'good' ? 3 : inputs.waterQuality === 'medium' ? 4 : 5;
            
            return `${stages}-—Å—Ç—É–ø–µ–Ω—á–∞—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞, ${cartridges} –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π/–≥–æ–¥, ${dailyUsage} –ª/–¥–µ–Ω—å`;
        }
    },

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–ª—è cooking
    {
        id: 'bread_calculator',
        title: '–†–∞—Å—á–µ—Ç —Ç–µ—Å—Ç–∞ –¥–ª—è —Ö–ª–µ–±–∞',
        description: '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –≤—ã–ø–µ—á–∫–∏ —Ö–ª–µ–±–∞',
        category: 'cooking',
        icon: 'üçû',
        inputs: [
            { name: 'loaves', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ö–∞–Ω–æ–∫', type: 'number', min: 1, max: 10 },
            { name: 'loafWeight', label: '–í–µ—Å –±—É—Ö–∞–Ω–∫–∏ (–≥)', type: 'number', min: 300, max: 1000, value: 500 },
            { name: 'breadType', label: '–¢–∏–ø —Ö–ª–µ–±–∞', type: 'select', options: [
                { value: 'white', text: '–ë–µ–ª—ã–π' },
                { value: 'whole', text: '–¶–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π' },
                { value: 'rye', text: '–†–∂–∞–Ω–æ–π' },
                { value: 'mixed', text: '–°–º–µ—à–∞–Ω–Ω—ã–π' }
            ]}
        ],
        calculate: (inputs) => {
            const totalWeight = inputs.loaves * inputs.loafWeight;
            const flourWeight = totalWeight * 0.6; // 60% –º—É–∫–∏
            
            const recipes = {
                white: { water: 0.65, yeast: 0.02, salt: 0.02, sugar: 0.03 },
                whole: { water: 0.7, yeast: 0.025, salt: 0.02, sugar: 0.02 },
                rye: { water: 0.75, yeast: 0.03, salt: 0.02, sugar: 0.01 },
                mixed: { water: 0.68, yeast: 0.025, salt: 0.02, sugar: 0.02 }
            };
            
            const recipe = recipes[inputs.breadType];
            
            return `–ú—É–∫–∞: ${flourWeight.toFixed(0)} –≥, –≤–æ–¥–∞: ${(flourWeight * recipe.water).toFixed(0)} –º–ª, –¥—Ä–æ–∂–∂–∏: ${(flourWeight * recipe.yeast).toFixed(0)} –≥, —Å–æ–ª—å: ${(flourWeight * recipe.salt).toFixed(0)} –≥`;
        }
    },

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–ª—è garden
    {
        id: 'lawn_care',
        title: '–£—Ö–æ–¥ –∑–∞ –≥–∞–∑–æ–Ω–æ–º',
        description: '–ì—Ä–∞—Ñ–∏–∫ —É—Ö–æ–¥–∞ –∑–∞ –≥–∞–∑–æ–Ω–æ–º',
        category: 'garden',
        icon: 'üå±',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –≥–∞–∑–æ–Ω–∞ (–º¬≤)', type: 'number', min: 10 },
            { name: 'grassType', label: '–¢–∏–ø –≥–∞–∑–æ–Ω–∞', type: 'select', options: [
                { value: 'sport', text: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π' },
                { value: 'decorative', text: '–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π' },
                { value: 'universal', text: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π' }
            ]},
            { name: 'season', label: '–°–µ–∑–æ–Ω', type: 'select', options: [
                { value: 'spring', text: '–í–µ—Å–Ω–∞' },
                { value: 'summer', text: '–õ–µ—Ç–æ' },
                { value: 'autumn', text: '–û—Å–µ–Ω—å' }
            ]}
        ],
        calculate: (inputs) => {
            const fertilizer = {
                spring: { n: 30, p: 10, k: 20 },
                summer: { n: 20, p: 5, k: 10 },
                autumn: { n: 10, p: 15, k: 30 }
            };
            
            const fert = fertilizer[inputs.season];
            const totalFert = inputs.area * (fert.n + fert.p + fert.k) / 1000;
            
            const mowing = inputs.grassType === 'sport' ? '—Ä–∞–∑ –≤ 5 –¥–Ω–µ–π' : inputs.grassType === 'decorative' ? '—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é' : '—Ä–∞–∑ –≤ 10 –¥–Ω–µ–π';
            
            return `–£–¥–æ–±—Ä–µ–Ω–∏—è: ${totalFert.toFixed(1)} –∫–≥ (N:P:K = ${fert.n}:${fert.p}:${fert.k}), —Å—Ç—Ä–∏–∂–∫–∞ ${mowing}, –ø–æ–ª–∏–≤ ${inputs.area * 5} –ª/–¥–µ–Ω—å`;
        }
    },
     // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è other
    {
        id: 'moving_boxes',
        title: '–ö–æ—Ä–æ–±–∫–∏ –¥–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞',
        description: '–†–∞—Å—á–µ—Ç —É–ø–∞–∫–æ–≤–∫–∏ –¥–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞',
        category: 'other',
        icon: 'üì¶',
        inputs: [
            { name: 'rooms', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç', type: 'number', min: 1, max: 10 },
            { name: 'people', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫', type: 'number', min: 1, max: 10 },
            { name: 'moveType', label: '–¢–∏–ø –ø–µ—Ä–µ–µ–∑–¥–∞', type: 'select', options: [
                { value: 'minimal', text: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π' },
                { value: 'standard', text: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π' },
                { value: 'full', text: '–° –º–µ–±–µ–ª—å—é' }
            ]}
        ],
        calculate: (inputs) => {
            const boxesPerRoom = {
                minimal: 5,
                standard: 10,
                full: 15
            };
            
            const smallBoxes = inputs.rooms * boxesPerRoom[inputs.moveType] * 0.4;
            const mediumBoxes = inputs.rooms * boxesPerRoom[inputs.moveType] * 0.4;
            const largeBoxes = inputs.rooms * boxesPerRoom[inputs.moveType] * 0.2;
            
            const tape = Math.ceil((smallBoxes + mediumBoxes + largeBoxes) / 10); // 1 –º–æ—Ç–æ–∫ –Ω–∞ 10 –∫–æ—Ä–æ–±–æ–∫
            const bubble = inputs.rooms * 10; // 10–º –Ω–∞ –∫–æ–º–Ω–∞—Ç—É
            
            return `–ú–∞–ª—ã–µ: ${Math.ceil(smallBoxes)}, —Å—Ä–µ–¥–Ω–∏–µ: ${Math.ceil(mediumBoxes)}, –±–æ–ª—å—à–∏–µ: ${Math.ceil(largeBoxes)}, —Å–∫–æ—Ç—á: ${tape} –º–æ—Ç–∫–æ–≤, –ø—É–∑—ã—Ä—á–∞—Ç–∞—è –ø–ª–µ–Ω–∫–∞: ${bubble} –º`;
        }
    },
    {
        id: 'aquarium',
        title: '–ê–∫–≤–∞—Ä–∏—É–º',
        description: '–†–∞—Å—á–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞',
        category: 'other',
        icon: 'üê†',
        inputs: [
            { name: 'length', label: '–î–ª–∏–Ω–∞ (—Å–º)', type: 'number', min: 20, max: 200 },
            { name: 'width', label: '–®–∏—Ä–∏–Ω–∞ (—Å–º)', type: 'number', min: 20, max: 100 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ (—Å–º)', type: 'number', min: 20, max: 100 },
            { name: 'fishType', label: '–¢–∏–ø —Ä—ã–±', type: 'select', options: [
                { value: 'small', text: '–ú–µ–ª–∫–∏–µ (–≥—É–ø–ø–∏, –Ω–µ–æ–Ω—ã)' },
                { value: 'medium', text: '–°—Ä–µ–¥–Ω–∏–µ (–±–∞—Ä–±—É—Å—ã, –≥—É—Ä–∞–º–∏)' },
                { value: 'large', text: '–ö—Ä—É–ø–Ω—ã–µ (—Ü–∏—Ö–ª–∏–¥—ã)' }
            ]}
        ],
        calculate: (inputs) => {
            const volumeL = (inputs.length * inputs.width * inputs.height) / 1000;
            
            // –§–∏–ª—å—Ç—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å 3-5 –æ–±—ä–µ–º–æ–≤ –≤ —á–∞—Å
            const filterPower = volumeL * 4;
            
            // –ù–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å 1 –í—Ç –Ω–∞ 1 –ª
            const heaterPower = volumeL;
            
            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ã–±
            const fishCount = {
                small: volumeL / 3,
                medium: volumeL / 10,
                large: volumeL / 30
            };
            
            // –ì—Ä—É–Ω—Ç 5-7 —Å–º
            const substrate = (inputs.length * inputs.width * 6) / 1000;
            
            return `–û–±—ä–µ–º: ${volumeL.toFixed(0)} –ª, —Ñ–∏–ª—å—Ç—Ä: ${filterPower.toFixed(0)} –ª/—á, –Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å: ${heaterPower.toFixed(0)} –í—Ç, —Ä—ã–±: –¥–æ ${Math.floor(fishCount[inputs.fishType])} —à—Ç, –≥—Ä—É–Ω—Ç: ${substrate.toFixed(1)} –∫–≥`;
        }
    },
    {
        id: 'home_gym',
        title: '–î–æ–º–∞—à–Ω–∏–π —Å–ø–æ—Ä—Ç–∑–∞–ª',
        description: '–†–∞—Å—á–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ø–æ—Ä—Ç–∑–∞–ª–∞',
        category: 'other',
        icon: 'üèãÔ∏è',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è (–º¬≤)', type: 'number', min: 4, max: 50 },
            { name: 'goals', label: '–¶–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫', type: 'select', options: [
                { value: 'cardio', text: '–ö–∞—Ä–¥–∏–æ' },
                { value: 'strength', text: '–°–∏–ª–æ–≤—ã–µ' },
                { value: 'mixed', text: '–°–º–µ—à–∞–Ω–Ω—ã–µ' },
                { value: 'yoga', text: '–ô–æ–≥–∞/–ø–∏–ª–∞—Ç–µ—Å' }
            ]},
            { name: 'budget', label: '–ë—é–¥–∂–µ—Ç', type: 'select', options: [
                { value: 'minimal', text: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π' },
                { value: 'standard', text: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π' },
                { value: 'premium', text: '–ü—Ä–µ–º–∏—É–º' }
            ]}
        ],
        calculate: (inputs) => {
            const equipment = {
                cardio: {
                    minimal: '–°–∫–∞–∫–∞–ª–∫–∞, –∫–æ–≤—Ä–∏–∫',
                    standard: '–ë–µ–≥–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞, –∫–æ–≤—Ä–∏–∫',
                    premium: '–ë–µ–≥–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞, –≤–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä, —ç–ª–ª–∏–ø—Å–æ–∏–¥'
                },
                strength: {
                    minimal: '–ì–∞–Ω—Ç–µ–ª–∏ —Ä–∞–∑–±–æ—Ä–Ω—ã–µ, —Ç—É—Ä–Ω–∏–∫',
                    standard: '–®—Ç–∞–Ω–≥–∞, —Å—Ç–æ–π–∫–∏, —Å–∫–∞–º—å—è, –≥–∞–Ω—Ç–µ–ª–∏',
                    premium: '–°–∏–ª–æ–≤–∞—è —Ä–∞–º–∞, —à—Ç–∞–Ω–≥–∞, –≥–∞–Ω—Ç–µ–ª–∏, —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã'
                },
                mixed: {
                    minimal: '–ì–∞–Ω—Ç–µ–ª–∏, –∫–æ–≤—Ä–∏–∫, —Ç—É—Ä–Ω–∏–∫',
                    standard: '–ë–µ–≥–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞, –≥–∞–Ω—Ç–µ–ª–∏, —Å–∫–∞–º—å—è',
                    premium: '–ú—É–ª—å—Ç–∏—Å—Ç–∞–Ω—Ü–∏—è, –∫–∞—Ä–¥–∏–æ-—Ç—Ä–µ–Ω–∞–∂–µ—Ä, —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤–µ—Å–∞'
                },
                yoga: {
                    minimal: '–ö–æ–≤—Ä–∏–∫, –±–ª–æ–∫–∏, —Ä–µ–º–µ–Ω—å',
                    standard: '–ö–æ–≤—Ä–∏–∫, –±–ª–æ–∫–∏, –±–æ–ª—Å—Ç–µ—Ä, —Ä–µ–º–Ω–∏',
                    premium: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –π–æ–≥–∏'
                }
            };
            
            const flooring = inputs.area * (inputs.goals === 'strength' ? 1 : 0.5);
            const mirrors = inputs.goals !== 'cardio' ? Math.ceil(inputs.area / 10) : 0;
            
                        return `${equipment[inputs.goals][inputs.budget]}, —Ä–µ–∑–∏–Ω–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: ${flooring.toFixed(0)} –º¬≤${mirrors > 0 ? `, –∑–µ—Ä–∫–∞–ª–∞: ${mirrors} —à—Ç` : ''}`;
        }
    },
    {
        id: 'pet_supplies',
        title: '–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–∏—Ç–æ–º—Ü–∞',
        description: '–†–∞—Å—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ',
        category: 'other',
        icon: 'üêï',
        inputs: [
            { name: 'petType', label: '–¢–∏–ø –ø–∏—Ç–æ–º—Ü–∞', type: 'select', options: [
                { value: 'cat', text: '–ö–æ—à–∫–∞' },
                { value: 'small_dog', text: '–°–æ–±–∞–∫–∞ –º–µ–ª–∫–∞—è (–¥–æ 10 –∫–≥)' },
                { value: 'medium_dog', text: '–°–æ–±–∞–∫–∞ —Å—Ä–µ–¥–Ω—è—è (10-25 –∫–≥)' },
                { value: 'large_dog', text: '–°–æ–±–∞–∫–∞ –∫—Ä—É–ø–Ω–∞—è (–±–æ–ª–µ–µ 25 –∫–≥)' }
            ]},
            { name: 'foodType', label: '–¢–∏–ø –∫–æ—Ä–º–∞', type: 'select', options: [
                { value: 'economy', text: '–≠–∫–æ–Ω–æ–º' },
                { value: 'premium', text: '–ü—Ä–µ–º–∏—É–º' },
                { value: 'super_premium', text: '–°—É–ø–µ—Ä-–ø—Ä–µ–º–∏—É–º' }
            ]},
            { name: 'period', label: '–ü–µ—Ä–∏–æ–¥ —Ä–∞—Å—á–µ—Ç–∞', type: 'select', options: [
                { value: 1, text: '–ú–µ—Å—è—Ü' },
                { value: 12, text: '–ì–æ–¥' }
            ]}
        ],
        calculate: (inputs) => {
            const foodConsumption = {
                cat: { economy: 3, premium: 2.5, super_premium: 2 },
                small_dog: { economy: 4, premium: 3, super_premium: 2.5 },
                medium_dog: { economy: 8, premium: 6, super_premium: 5 },
                large_dog: { economy: 15, premium: 12, super_premium: 10 }
            };
            
            const foodKg = foodConsumption[inputs.petType][inputs.foodType] * inputs.period;
            const litter = inputs.petType === 'cat' ? 5 * inputs.period : 0;
            const vetVisits = inputs.period === 12 ? 2 : 0.2;
            const grooming = inputs.petType.includes('dog') ? inputs.period : inputs.period / 3;
            
            return `–ö–æ—Ä–º: ${foodKg} –∫–≥${litter > 0 ? `, –Ω–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${litter} –∫–≥` : ''}, –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä: ${vetVisits.toFixed(1)} –≤–∏–∑–∏—Ç–æ–≤, –≥—Ä—É–º–∏–Ω–≥: ${grooming.toFixed(0)} —Ä–∞–∑`;
        }
    },
    {
        id: 'greenhouse_heating',
        title: '–û—Ç–æ–ø–ª–µ–Ω–∏–µ —Ç–µ–ø–ª–∏—Ü—ã',
        description: '–†–∞—Å—á–µ—Ç –æ–±–æ–≥—Ä–µ–≤–∞ —Ç–µ–ø–ª–∏—Ü—ã',
        category: 'other',
        icon: 'üå°Ô∏è',
        inputs: [
            { name: 'length', label: '–î–ª–∏–Ω–∞ —Ç–µ–ø–ª–∏—Ü—ã (–º)', type: 'number', min: 2, max: 20 },
            { name: 'width', label: '–®–∏—Ä–∏–Ω–∞ —Ç–µ–ø–ª–∏—Ü—ã (–º)', type: 'number', min: 2, max: 10 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ —Ç–µ–ø–ª–∏—Ü—ã (–º)', type: 'number', min: 2, max: 4, value: 2.5 },
            { name: 'tempDiff', label: '–†–∞–∑–Ω–∏—Ü–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä (¬∞C)', type: 'number', min: 10, max: 40, value: 20 },
            { name: 'material', label: '–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–∫—Ä—ã—Ç–∏—è', type: 'select', options: [
                { value: 5.8, text: '–°—Ç–µ–∫–ª–æ 4–º–º' },
                { value: 3.5, text: '–ü–æ–ª–∏–∫–∞—Ä–±–æ–Ω–∞—Ç 4–º–º' },
                { value: 2.3, text: '–ü–æ–ª–∏–∫–∞—Ä–±–æ–Ω–∞—Ç 8–º–º' },
                { value: 1.5, text: '–ü–æ–ª–∏–∫–∞—Ä–±–æ–Ω–∞—Ç 16–º–º' }
            ]}
        ],
        calculate: (inputs) => {
            // –ü–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Ç–µ–ø–ª–∏—Ü—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            const surfaceArea = 2 * inputs.length * inputs.height + 
                               2 * inputs.width * inputs.height + 
                               inputs.length * inputs.width;
            
            // –¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏ = –ø–ª–æ—â–∞–¥—å √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç √ó —Ä–∞–∑–Ω–∏—Ü–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
            const heatLoss = surfaceArea * inputs.material * inputs.tempDiff;
            const heatLossKW = heatLoss / 1000;
            
            // –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞
            const electricKWh = heatLossKW * 24; // –∫–í—Ç¬∑—á –≤ —Å—É—Ç–∫–∏
            const gasM3 = heatLossKW * 2.4; // –º¬≥ –≥–∞–∑–∞ –≤ —Å—É—Ç–∫–∏
            
            return `–¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏: ${heatLossKW.toFixed(1)} –∫–í—Ç, —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ: ${electricKWh.toFixed(0)} –∫–í—Ç¬∑—á/—Å—É—Ç–∫–∏, –≥–∞–∑: ${gasM3.toFixed(1)} –º¬≥/—Å—É—Ç–∫–∏`;
        }
    },
    {
        id: 'sauna_materials',
        title: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –±–∞–Ω–∏',
        description: '–†–∞—Å—á–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Å–∞—É–Ω—ã/–±–∞–Ω–∏',
        category: 'other',
        icon: 'üßñ',
        inputs: [
            { name: 'length', label: '–î–ª–∏–Ω–∞ –ø–∞—Ä–Ω–æ–π (–º)', type: 'number', min: 1.5, max: 5, step: 0.1 },
            { name: 'width', label: '–®–∏—Ä–∏–Ω–∞ –ø–∞—Ä–Ω–æ–π (–º)', type: 'number', min: 1.5, max: 4, step: 0.1 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ –ø–∞—Ä–Ω–æ–π (–º)', type: 'number', min: 2, max: 2.5, step: 0.1, value: 2.2 },
            { name: 'wood', label: '–ü–æ—Ä–æ–¥–∞ –¥–µ—Ä–µ–≤–∞', type: 'select', options: [
                { value: 'linden', text: '–õ–∏–ø–∞' },
                { value: 'aspen', text: '–û—Å–∏–Ω–∞' },
                { value: 'cedar', text: '–ö–µ–¥—Ä' },
                { value: 'alder', text: '–û–ª—å—Ö–∞' }
            ]}
        ],
        calculate: (inputs) => {
            const wallArea = 2 * (inputs.length + inputs.width) * inputs.height;
            const ceilingArea = inputs.length * inputs.width;
            const totalArea = wallArea + ceilingArea;
            
            // –í–∞–≥–æ–Ω–∫–∞ —Å —É—á–µ—Ç–æ–º –æ—Ç—Ö–æ–¥–æ–≤
            const lining = totalArea * 1.15;
            
            // –£—Ç–µ–ø–ª–∏—Ç–µ–ª—å (100–º–º)
            const insulation = totalArea * 0.1;
            
            // –§–æ–ª—å–≥–∞
            const foil = totalArea * 1.1;
            
            // –ü–æ–ª–∫–∏ (30% –æ—Ç –ø–ª–æ—â–∞–¥–∏ –ø–æ–ª–∞)
            const benchArea = inputs.length * inputs.width * 0.3;
            
            // –ü–µ—á—å (1 –∫–í—Ç –Ω–∞ 1 –º¬≥)
            const volume = inputs.length * inputs.width * inputs.height;
            const stovePower = Math.ceil(volume);
            
            return `–í–∞–≥–æ–Ω–∫–∞: ${lining.toFixed(1)} –º¬≤, —É—Ç–µ–ø–ª–∏—Ç–µ–ª—å: ${insulation.toFixed(1)} –º¬≥, —Ñ–æ–ª—å–≥–∞: ${foil.toFixed(1)} –º¬≤, –ø–æ–ª–∫–∏: ${benchArea.toFixed(1)} –º¬≤, –ø–µ—á—å: ${stovePower} –∫–í—Ç`;
        }
    },
    {
        id: 'workshop_tools',
        title: '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π',
        description: '–ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
        category: 'other',
        icon: 'üîß',
        inputs: [
            { name: 'type', label: '–¢–∏–ø –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π', type: 'select', options: [
                { value: 'wood', text: '–°—Ç–æ–ª—è—Ä–Ω–∞—è' },
                { value: 'metal', text: '–°–ª–µ—Å–∞—Ä–Ω–∞—è' },
                { value: 'auto', text: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è' },
                { value: 'universal', text: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è' }
            ]},
            { name: 'level', label: '–£—Ä–æ–≤–µ–Ω—å –æ—Å–Ω–∞—â–µ–Ω–∏—è', type: 'select', options: [
                { value: 'hobby', text: '–•–æ–±–±–∏' },
                { value: 'semi_pro', text: '–ü–æ–ª—É–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π' },
                { value: 'pro', text: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π' }
            ]},
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π (–º¬≤)', type: 'number', min: 6, max: 100 }
        ],
        calculate: (inputs) => {
            const tools = {
                wood: {
                    hobby: '–†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –¥—Ä–µ–ª—å, –ª–æ–±–∑–∏–∫',
                    semi_pro: '+ —Ü–∏—Ä–∫—É–ª—è—Ä–∫–∞, —Ñ—Ä–µ–∑–µ—Ä, —à–ª–∏—Ñ–º–∞—à–∏–Ω–∞',
                    pro: '+ —Å—Ç–∞–Ω–∫–∏ (—Ä–µ–π—Å–º—É—Å, —Ñ—É–≥–∞–Ω–æ–∫, —Ç–æ–∫–∞—Ä–Ω—ã–π)'
                },
                metal: {
                    hobby: '–†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –¥—Ä–µ–ª—å, –±–æ–ª–≥–∞—Ä–∫–∞',
                    semi_pro: '+ —Å–≤–∞—Ä–æ—á–Ω—ã–π –∞–ø–ø–∞—Ä–∞—Ç, —Ç–æ—á–∏–ª–æ',
                    pro: '+ —Ç–æ–∫–∞—Ä–Ω—ã–π —Å—Ç–∞–Ω–æ–∫, —Ñ—Ä–µ–∑–µ—Ä–Ω—ã–π —Å—Ç–∞–Ω–æ–∫'
                },
                auto: {
                    hobby: '–ù–∞–±–æ—Ä –∫–ª—é—á–µ–π, –¥–æ–º–∫—Ä–∞—Ç, –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä',
                    semi_pro: '+ –ø–æ–¥—ä–µ–º–Ω–∏–∫/—è–º–∞, —Å–≤–∞—Ä–∫–∞',
                    pro: '+ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞'
                },
                universal: {
                    hobby: '–ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
                    semi_pro: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä + —ç–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç',
                    pro: '–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä + —Å—Ç–∞–Ω–∫–∏'
                }
            };
            
            const workbenches = Math.ceil(inputs.area / 15);
            const storage = Math.ceil(inputs.area / 10);
            
            return `${tools[inputs.type][inputs.level]}, –≤–µ—Ä—Å—Ç–∞–∫–∏: ${workbenches} —à—Ç, —Å—Ç–µ–ª–ª–∞–∂–∏: ${storage} —à—Ç`;
        }
    },
    {
        id: 'event_tent',
        title: '–®–∞—Ç–µ—Ä –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
        description: '–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ —à–∞—Ç—Ä–∞',
        category: 'other',
        icon: 'üé™',
        inputs: [
            { name: 'guests', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π', type: 'number', min: 10, max: 500 },
            { name: 'eventType', label: '–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', type: 'select', options: [
                { value: 'standing', text: '–§—É—Ä—à–µ—Ç (—Å—Ç–æ—è)' },
                { value: 'mixed', text: '–°–º–µ—à–∞–Ω–Ω—ã–π' },
                { value: 'seated', text: '–ë–∞–Ω–∫–µ—Ç (—Å–∏–¥—è)' },
                { value: 'concert', text: '–ö–æ–Ω—Ü–µ—Ä—Ç' }
            ]},
            { name: 'extras', label: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', type: 'select', options: [
                { value: 1, text: '–¢–æ–ª—å–∫–æ –≥–æ—Å—Ç–∏' },
                { value: 1.2, text: '+ —Å—Ü–µ–Ω–∞/—Ç–∞–Ω—Ü–ø–æ–ª' },
                { value: 1.4, text: '+ —Å—Ü–µ–Ω–∞ + –±–∞—Ä' }
            ]}
        ],
        calculate: (inputs) => {
            const spacePerPerson = {
                standing: 0.5,
                mixed: 1,
                seated: 1.5,
                concert: 0.3
            };
            
            const baseArea = inputs.guests * spacePerPerson[inputs.eventType] * inputs.extras;
            
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —à–∞—Ç—Ä–æ–≤
            const tentSizes = [
                { area: 25, size: '5√ó5' },
                { area: 50, size: '5√ó10' },
                { area: 100, size: '10√ó10' },
                { area: 150, size: '10√ó15' },
                { area: 200, size: '10√ó20' },
                { area: 300, size: '15√ó20' },
                { area: 500, size: '20√ó25' }
            ];
            
            const tent = tentSizes.find(t => t.area >= baseArea) || tentSizes[tentSizes.length - 1];
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
            const tables = inputs.eventType === 'seated' ? Math.ceil(inputs.guests / 8) : 0;
            const chairs = inputs.eventType !== 'standing' ? inputs.guests : 0;
            
            return `–®–∞—Ç–µ—Ä ${tent.size} –º (${tent.area} –º¬≤)${tables > 0 ? `, —Å—Ç–æ–ª—ã: ${tables}` : ''}${chairs > 0 ? `, —Å—Ç—É–ª—å—è: ${chairs}` : ''}`;
        }
    },
    {
        id: 'storage_unit',
        title: '–°–∫–ª–∞–¥—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ',
        description: '–†–∞—Å—á–µ—Ç —Å—Ç–µ–ª–ª–∞–∂–µ–π –¥–ª—è —Å–∫–ª–∞–¥–∞',
        category: 'other',
        icon: 'üì¶',
        inputs: [
            { name: 'area', label: '–ü–ª–æ—â–∞–¥—å —Å–∫–ª–∞–¥–∞ (–º¬≤)', type: 'number', min: 10, max: 1000 },
            { name: 'height', label: '–í—ã—Å–æ—Ç–∞ –ø–æ–º–µ—â–µ–Ω–∏—è (–º)', type: 'number', min: 2.5, max: 10, step: 0.5 },
            { name: 'loadType', label: '–¢–∏–ø –≥—Ä—É–∑–∞', type: 'select', options: [
                { value: 'light', text: '–õ–µ–≥–∫–∏–π (–¥–æ 100 –∫–≥/–º¬≤)' },
                { value: 'medium', text: '–°—Ä–µ–¥–Ω–∏–π (100-500 –∫–≥/–º¬≤)' },
                { value: 'heavy', text: '–¢—è–∂–µ–ª—ã–π (–±–æ–ª–µ–µ 500 –∫–≥/–º¬≤)' }
            ]},
            { name: 'access', label: '–î–æ—Å—Ç—É–ø –∫ —Ç–æ–≤–∞—Ä—É', type: 'select', options: [
                { value: 'manual', text: '–†—É—á–Ω–æ–π' },
                { value: 'forklift', text: '–ü–æ–≥—Ä—É–∑—á–∏–∫' }
            ]}
        ],
        calculate: (inputs) => {
            // –ü–æ–ª–µ–∑–Ω–∞—è –ø–ª–æ—â–∞–¥—å (70% –æ—Ç –æ–±—â–µ–π)
            const usableArea = inputs.area * 0.7;
            
            // –í—ã—Å–æ—Ç–∞ —Å—Ç–µ–ª–ª–∞–∂–µ–π
            const rackHeight = inputs.access === 'manual' ? Math.min(2.5, inputs.height - 0.5) : inputs.height - 1;
            
            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—Ä—É—Å–æ–≤
            const tiers = Math.floor(rackHeight / 0.5);
            
            // –ü–ª–æ—â–∞–¥—å —Å—Ç–µ–ª–ª–∞–∂–µ–π
            const rackArea = usableArea * 0.6; // 60% –ø–æ–¥ —Å—Ç–µ–ª–ª–∞–∂–∏, 40% –ø—Ä–æ—Ö–æ–¥—ã
                        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–µ–ª–ª–∞–∂–Ω—ã—Ö —Å–µ–∫—Ü–∏–π (1.2–º √ó 0.6–º)
            const rackSections = Math.floor(rackArea / 0.72);
            
            // –ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å
            const loadCapacity = {
                light: 200,
                medium: 500,
                heavy: 1000
            };
            
            const totalCapacity = rackSections * tiers * loadCapacity[inputs.loadType];
            
            return `–°—Ç–µ–ª–ª–∞–∂–∏: ${rackSections} —Å–µ–∫—Ü–∏–π, —è—Ä—É—Å–æ–≤: ${tiers}, –æ–±—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: ${(totalCapacity / 1000).toFixed(1)} —Ç, –ø–æ–ª–µ–∑–Ω–∞—è –ø–ª–æ—â–∞–¥—å: ${usableArea.toFixed(0)} –º¬≤`;
        }
    }
];


// –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ renderCalculators
function getCategoryCount() {
    const categoryCounts = {};
    calculators.forEach(calc => {
        categoryCounts[calc.category] = (categoryCounts[calc.category] || 0) + 1;
    });
    return categoryCounts;
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
function updateCategoryButtons() {
    const counts = getCategoryCount();
    categoryButtons.forEach(btn => {
        const category = btn.dataset.category;
        if (category !== 'all') {
            const count = counts[category] || 0;
            btn.textContent = `${btn.textContent.split(' (')[0]} (${count})`;
        } else {
            btn.textContent = `–í—Å–µ (${calculators.length})`;
        }
    });
}

// –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function init() {
    // Load theme / –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', savedTheme);
    
    // Update category counts / –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    updateCategoryButtons();
    
    // Render calculators / –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
    renderCalculators();
    
    // Event listeners / –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
}

// DOM Elements / DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const calculatorsGrid = document.getElementById('calculatorsGrid');
const modal = document.getElementById('calculatorModal');
const modalTitle = document.getElementById('modalTitle');
const calculatorForm = document.getElementById('calculatorForm');
const resultValue = document.getElementById('resultValue');
const searchInput = document.querySelector('.search-input');
const themeToggle = document.querySelector('.theme-toggle');
const categoryButtons = document.querySelectorAll('.category-btn');

// State / –°–æ—Å—Ç–æ—è–Ω–∏–µ
let currentCategory = 'all';
let currentCalculator = null;

// Initialize / –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function init() {
    // Load theme / –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', savedTheme);
    
    // Render calculators / –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
    renderCalculators();
    
    // Event listeners / –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
}

// Render calculators / –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
function renderCalculators(searchTerm = '') {
    const filteredCalculators = calculators.filter(calc => {
        const matchesCategory = currentCategory === 'all' || calc.category === currentCategory;
        const matchesSearch = calc.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                            calc.description.toLowerCase().includes(searchTerm.toLowerCase());
        return matchesCategory && matchesSearch;
    });
    
    calculatorsGrid.innerHTML = filteredCalculators.map(calc => `
        <div class="calculator-card fade-in" data-id="${calc.id}">
            <div class="calculator-icon">${calc.icon}</div>
            <h3 class="calculator-title">${calc.title}</h3>
            <p class="calculator-description">${calc.description}</p>
        </div>
    `).join('');
    
    // Add click handlers / –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∏–∫–∞
    document.querySelectorAll('.calculator-card').forEach(card => {
        card.addEventListener('click', () => openCalculator(card.dataset.id));
    });
}

// Open calculator modal / –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
function openCalculator(id) {
    currentCalculator = calculators.find(calc => calc.id === id);
    if (!currentCalculator) return;
    
    modalTitle.textContent = currentCalculator.title;
    
    // Build form / –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    calculatorForm.innerHTML = currentCalculator.inputs.map(input => {
        // Check if input has condition
        if (input.condition) {
            // This input will be shown/hidden dynamically
            return '';
        }
        
        if (input.type === 'select') {
            return `
                <div class="form-group">
                    <label class="form-label" for="${input.name}">${input.label}</label>
                    <select class="form-select" id="${input.name}" name="${input.name}">
                        ${input.options.map(opt => 
                            `<option value="${opt.value}" ${input.value == opt.value ? 'selected' : ''}>${opt.text}</option>`
                        ).join('')}
                    </select>
                </div>
            `;
        } else {
            return `
                <div class="form-group">
                    <label class="form-label" for="${input.name}">${input.label}</label>
                    <input 
                        class="form-input" 
                        type="${input.type}" 
                        id="${input.name}" 
                        name="${input.name}"
                        ${input.min !== undefined ? `min="${input.min}"` : ''}
                        ${input.max !== undefined ? `max="${input.max}"` : ''}
                        ${input.step !== undefined ? `step="${input.step}"` : ''}
                        ${input.value !== undefined ? `value="${input.value}"` : ''}
                        required
                    >
                </div>
            `;
        }
    }).join('');
    
    // Add calculate button / –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—á–µ—Ç–∞
    calculatorForm.innerHTML += `
        <button class="calculate-btn" type="button" onclick="calculate()">
            –†–∞—Å—Å—á–∏—Ç–∞—Ç—å
        </button>
    `;
    
    // Add change listeners for conditional inputs
    setupConditionalInputs();
    
    // Reset result / –°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    resultValue.textContent = '‚Äî';
    
    // Show modal / –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.classList.add('active');
}

// Setup conditional inputs / –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ª–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
function setupConditionalInputs() {
    if (!currentCalculator) return;
    
    currentCalculator.inputs.forEach(input => {
        if (input.condition) {
            const dependentElement = document.getElementById(input.name);
            if (dependentElement) {
                // Check condition on change
                calculatorForm.addEventListener('change', () => {
                    const inputs = getFormInputs();
                    const shouldShow = input.condition(inputs);
                    dependentElement.closest('.form-group').style.display = shouldShow ? 'block' : 'none';
                });
            }
        }
    });
}

// Get form inputs / –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–æ—Ä–º—ã
function getFormInputs() {
    const inputs = {};
    currentCalculator.inputs.forEach(input => {
        const element = document.getElementById(input.name);
        if (element) {
            inputs[input.name] = input.type === 'number' ? 
                parseFloat(element.value) || 0 : element.value;
        }
    });
    return inputs;
}

// Calculate result / –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function calculate() {
    if (!currentCalculator) return;
    
    // Get input values / –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    const inputs = getFormInputs();
    
    // Validate inputs / –í–∞–ª–∏–¥–∞—Ü–∏—è
    let isValid = true;
    currentCalculator.inputs.forEach(input => {
        const element = document.getElementById(input.name);
        if (element && element.required && !element.value) {
            isValid = false;
            element.classList.add('error');
        } else if (element) {
            element.classList.remove('error');
        }
    });
    
    if (!isValid) {
        resultValue.textContent = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
        return;
    }
    
    // Calculate and display result / –†–∞—Å—á–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    try {
        const result = currentCalculator.calculate(inputs);
        resultValue.textContent = result;
        resultValue.classList.add('fade-in');
    } catch (error) {
        resultValue.textContent = '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞';
        console.error('Calculation error:', error);
    }
}

// Setup event listeners / –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // Theme toggle / –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    themeToggle.addEventListener('click', () => {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
    });
    
    // Search / –ü–æ–∏—Å–∫
    searchInput.addEventListener('input', (e) => {
        renderCalculators(e.target.value);
    });
    
    // Categories / –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    categoryButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            categoryButtons.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            currentCategory = btn.dataset.category;
            renderCalculators(searchInput.value);
        });
    });
    
    // Modal close / –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.querySelector('.modal-close').addEventListener('click', closeModal);
    modal.addEventListener('click', (e) => {
        if (e.target === modal) closeModal();
    });
    
    // Escape key / –ö–ª–∞–≤–∏—à–∞ Escape
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && modal.classList.contains('active')) {
            closeModal();
        }
    });
}

// Close modal / –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    modal.classList.remove('active');
    currentCalculator = null;
}

// Start application / –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', init);

// Make calculate function global / –°–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é calculate –≥–ª–æ–±–∞–ª—å–Ω–æ–π
window.calculate = calculate;
